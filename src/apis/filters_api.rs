/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;

#[async_trait]
pub trait FiltersApi: Send + Sync {

    /// POST /custom/locations/filters
    ///
    /// Create new filters to be used when searching for locations in the [Search Locations](./getcustomlocations) endpoint.  You can create filters for both Ribbon's existing data fields as well as any custom data fields you create.  #### Example Use Case: Let's say you add a new field to a bunch of locations that match your use case, for instance `c_section_rate`. You could make this field searchable so that your search through [Search Locations](./getcustomlocations) when you pass through a certain parameter that specifies a maximum threshold. 
    async fn create_custom_location_filter(&self,  params: CreateCustomLocationFilterParams ) -> Result<ResponseContent<CreateCustomLocationFilterSuccess>, Error<CreateCustomLocationFilterError>>;

    /// POST /custom/providers/filters
    ///
    /// Create new filters to be used when searching for providers in the [Search Providers](./getcustomproviders) endpoint.  You can create filters for both Ribbon's existing data fields as well as any custom data fields you create.  #### Example Use Case: Let's say you add a new field to a bunch of providers that match your use case, for instance `c_section_rate`. You could make this field searchable so that your search through [Search Providers](./getcustomproviders) when you pass through a certain parameter that specifies a maximum threshold. 
    async fn create_custom_provider_filter(&self,  params: CreateCustomProviderFilterParams ) -> Result<ResponseContent<CreateCustomProviderFilterSuccess>, Error<CreateCustomProviderFilterError>>;

    /// DELETE /custom/locations/filters/{filter_uuid}
    ///
    /// Delete a location filter. 
    async fn delete_custom_location_filter(&self,  params: DeleteCustomLocationFilterParams ) -> Result<ResponseContent<DeleteCustomLocationFilterSuccess>, Error<DeleteCustomLocationFilterError>>;

    /// DELETE /custom/providers/filters/{filter_uuid}
    ///
    /// Delete a provider filter. 
    async fn delete_custom_provider_filter(&self,  params: DeleteCustomProviderFilterParams ) -> Result<ResponseContent<DeleteCustomProviderFilterSuccess>, Error<DeleteCustomProviderFilterError>>;

    /// PUT /custom/locations/filters/{filter_uuid}
    ///
    /// Edit any of the fields in a custom location filter you have already created. 
    async fn edit_custom_location_filter(&self,  params: EditCustomLocationFilterParams ) -> Result<ResponseContent<EditCustomLocationFilterSuccess>, Error<EditCustomLocationFilterError>>;

    /// PUT /custom/providers/filters/{filter_uuid}
    ///
    /// Edit any of the fields in a custom provider filter you have already created. 
    async fn edit_custom_provider_filter(&self,  params: EditCustomProviderFilterParams ) -> Result<ResponseContent<EditCustomProviderFilterSuccess>, Error<EditCustomProviderFilterError>>;

    /// GET /custom/locations/filters
    ///
    /// Fetch all previously created custom filters for locations. 
    async fn get_custom_location_filters(&self, ) -> Result<ResponseContent<GetCustomLocationFiltersSuccess>, Error<GetCustomLocationFiltersError>>;

    /// GET /custom/providers/filters
    ///
    /// Fetch all previously created filters for providers. 
    async fn get_custom_provider_filters(&self, ) -> Result<ResponseContent<GetCustomProviderFiltersSuccess>, Error<GetCustomProviderFiltersError>>;
}

pub struct FiltersApiClient {
    configuration: Arc<configuration::Configuration>
}

impl FiltersApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`create_custom_location_filter`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct CreateCustomLocationFilterParams {
    /// The new filter to create
    pub create_custom_provider_filter_request: models::CreateCustomProviderFilterRequest
}

/// struct for passing parameters to the method [`create_custom_provider_filter`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct CreateCustomProviderFilterParams {
    /// The new filter to create
    pub create_custom_provider_filter_request: models::CreateCustomProviderFilterRequest
}

/// struct for passing parameters to the method [`delete_custom_location_filter`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteCustomLocationFilterParams {
    /// The UUID of the filter you want to delete.
    pub filter_uuid: String
}

/// struct for passing parameters to the method [`delete_custom_provider_filter`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteCustomProviderFilterParams {
    /// The UUID of the filter you want to delete.
    pub filter_uuid: String
}

/// struct for passing parameters to the method [`edit_custom_location_filter`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct EditCustomLocationFilterParams {
    /// The UUID of the filter you want to edit.
    pub filter_uuid: String,
    /// A JSON object mapping the name of the field to update to its new value.
    pub edit_custom_location_filter_request: models::EditCustomLocationFilterRequest
}

/// struct for passing parameters to the method [`edit_custom_provider_filter`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct EditCustomProviderFilterParams {
    /// The UUID of the filter you want to edit.
    pub filter_uuid: String,
    /// A JSON object mapping the name of the field to update to its new value.
    pub edit_custom_provider_filter_request: models::EditCustomProviderFilterRequest
}


#[async_trait]
impl FiltersApi for FiltersApiClient {
    /// Create new filters to be used when searching for locations in the [Search Locations](./getcustomlocations) endpoint.  You can create filters for both Ribbon's existing data fields as well as any custom data fields you create.  #### Example Use Case: Let's say you add a new field to a bunch of locations that match your use case, for instance `c_section_rate`. You could make this field searchable so that your search through [Search Locations](./getcustomlocations) when you pass through a certain parameter that specifies a maximum threshold. 
    async fn create_custom_location_filter(&self,  params: CreateCustomLocationFilterParams ) -> Result<ResponseContent<CreateCustomLocationFilterSuccess>, Error<CreateCustomLocationFilterError>> {
        
        let CreateCustomLocationFilterParams {
            create_custom_provider_filter_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations/filters", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&create_custom_provider_filter_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<CreateCustomLocationFilterSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<CreateCustomLocationFilterError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Create new filters to be used when searching for providers in the [Search Providers](./getcustomproviders) endpoint.  You can create filters for both Ribbon's existing data fields as well as any custom data fields you create.  #### Example Use Case: Let's say you add a new field to a bunch of providers that match your use case, for instance `c_section_rate`. You could make this field searchable so that your search through [Search Providers](./getcustomproviders) when you pass through a certain parameter that specifies a maximum threshold. 
    async fn create_custom_provider_filter(&self,  params: CreateCustomProviderFilterParams ) -> Result<ResponseContent<CreateCustomProviderFilterSuccess>, Error<CreateCustomProviderFilterError>> {
        
        let CreateCustomProviderFilterParams {
            create_custom_provider_filter_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/filters", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&create_custom_provider_filter_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<CreateCustomProviderFilterSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<CreateCustomProviderFilterError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Delete a location filter. 
    async fn delete_custom_location_filter(&self,  params: DeleteCustomLocationFilterParams ) -> Result<ResponseContent<DeleteCustomLocationFilterSuccess>, Error<DeleteCustomLocationFilterError>> {
        
        let DeleteCustomLocationFilterParams {
            filter_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations/filters/{filter_uuid}", local_var_configuration.base_path, filter_uuid=crate::apis::urlencode(filter_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<DeleteCustomLocationFilterSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<DeleteCustomLocationFilterError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Delete a provider filter. 
    async fn delete_custom_provider_filter(&self,  params: DeleteCustomProviderFilterParams ) -> Result<ResponseContent<DeleteCustomProviderFilterSuccess>, Error<DeleteCustomProviderFilterError>> {
        
        let DeleteCustomProviderFilterParams {
            filter_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/filters/{filter_uuid}", local_var_configuration.base_path, filter_uuid=crate::apis::urlencode(filter_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<DeleteCustomProviderFilterSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<DeleteCustomProviderFilterError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit any of the fields in a custom location filter you have already created. 
    async fn edit_custom_location_filter(&self,  params: EditCustomLocationFilterParams ) -> Result<ResponseContent<EditCustomLocationFilterSuccess>, Error<EditCustomLocationFilterError>> {
        
        let EditCustomLocationFilterParams {
            filter_uuid,
            edit_custom_location_filter_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations/filters/{filter_uuid}", local_var_configuration.base_path, filter_uuid=crate::apis::urlencode(filter_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&edit_custom_location_filter_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<EditCustomLocationFilterSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<EditCustomLocationFilterError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit any of the fields in a custom provider filter you have already created. 
    async fn edit_custom_provider_filter(&self,  params: EditCustomProviderFilterParams ) -> Result<ResponseContent<EditCustomProviderFilterSuccess>, Error<EditCustomProviderFilterError>> {
        
        let EditCustomProviderFilterParams {
            filter_uuid,
            edit_custom_provider_filter_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/filters/{filter_uuid}", local_var_configuration.base_path, filter_uuid=crate::apis::urlencode(filter_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&edit_custom_provider_filter_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<EditCustomProviderFilterSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<EditCustomProviderFilterError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Fetch all previously created custom filters for locations. 
    async fn get_custom_location_filters(&self, ) -> Result<ResponseContent<GetCustomLocationFiltersSuccess>, Error<GetCustomLocationFiltersError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations/filters", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomLocationFiltersSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomLocationFiltersError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Fetch all previously created filters for providers. 
    async fn get_custom_provider_filters(&self, ) -> Result<ResponseContent<GetCustomProviderFiltersSuccess>, Error<GetCustomProviderFiltersError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/filters", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomProviderFiltersSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomProviderFiltersError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed successes of method [`create_custom_location_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomLocationFilterSuccess {
    Status201(models::CreateCustomProviderFilter201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`create_custom_provider_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomProviderFilterSuccess {
    Status201(models::CreateCustomProviderFilter201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_custom_location_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomLocationFilterSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_custom_provider_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomProviderFilterSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`edit_custom_location_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditCustomLocationFilterSuccess {
    Status200(models::EditCustomLocationFilter200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`edit_custom_provider_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditCustomProviderFilterSuccess {
    Status200(models::CreateCustomProviderFilter201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_location_filters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomLocationFiltersSuccess {
    Status200(models::GetCustomProviderFilters200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_provider_filters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomProviderFiltersSuccess {
    Status200(models::GetCustomProviderFilters200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_custom_location_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomLocationFilterError {
    Status400(models::GetCustomProviders400Response),
    Status409(models::GetCustomProviders400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_custom_provider_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomProviderFilterError {
    Status400(models::GetCustomProviders400Response),
    Status409(models::GetCustomProviders400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_custom_location_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomLocationFilterError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_custom_provider_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomProviderFilterError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edit_custom_location_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditCustomLocationFilterError {
    Status400(models::GetCustomProviders400Response),
    Status404(models::GetCustomProvider404Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edit_custom_provider_filter`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditCustomProviderFilterError {
    Status400(models::GetCustomProviders400Response),
    Status404(models::GetCustomProvider404Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_location_filters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomLocationFiltersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_provider_filters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomProviderFiltersError {
    UnknownValue(serde_json::Value),
}

