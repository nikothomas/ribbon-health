/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;

#[async_trait]
pub trait FocusAreaEndpointsApi: Send + Sync {

    /// GET /custom/clinical_areas/{clinical_area_uuid}
    ///
    /// Retrieve data on a specific clinical area. 
    async fn get_clinical_area(&self,  params: GetClinicalAreaParams ) -> Result<ResponseContent<GetClinicalAreaSuccess>, Error<GetClinicalAreaError>>;

    /// GET /custom/clinical_areas
    ///
    /// Returns clinical areas that exist within the Ribbon API. 
    async fn get_clinical_areas(&self,  params: GetClinicalAreasParams ) -> Result<ResponseContent<GetClinicalAreasSuccess>, Error<GetClinicalAreasError>>;

    /// GET /custom/conditions/{condition_uuid}
    ///
    /// Retrieve data on a specific condition. 
    async fn get_condition(&self,  params: GetConditionParams ) -> Result<ResponseContent<GetConditionSuccess>, Error<GetConditionError>>;

    /// GET /custom/conditions
    ///
    /// Returns conditions that exist within the Ribbon API. 
    async fn get_conditions(&self,  params: GetConditionsParams ) -> Result<ResponseContent<GetConditionsSuccess>, Error<GetConditionsError>>;

    /// GET /custom/treatments/{treatment_uuid}
    ///
    /// Retrieve data on a specific treatment. 
    async fn get_treatment(&self,  params: GetTreatmentParams ) -> Result<ResponseContent<GetTreatmentSuccess>, Error<GetTreatmentError>>;

    /// GET /custom/treatments
    ///
    /// Returns treatments that exist within the Ribbon API. 
    async fn get_treatments(&self,  params: GetTreatmentsParams ) -> Result<ResponseContent<GetTreatmentsSuccess>, Error<GetTreatmentsError>>;
}

pub struct FocusAreaEndpointsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl FocusAreaEndpointsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`get_clinical_area`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetClinicalAreaParams {
    /// The UUID of the target clinical area.
    pub clinical_area_uuid: String
}

/// struct for passing parameters to the method [`get_clinical_areas`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetClinicalAreasParams {
    /// The page of the results which was returned.
    pub page: Option<i32>,
    /// How many results are in each page.
    pub page_size: Option<i32>,
    /// String input that fuzzy searches against key fields within each clinical area object to return the most relevant options.
    pub search: Option<String>,
    /// String input that fuzzy searches on `display` field.
    pub clinical_area: Option<String>,
    /// Comma separated list of clinical area UUIDs to exclude from search results.
    pub _excl_clinical_area_ids: Option<String>,
    /// Comma separated list of specialty UUIDs.
    pub specialty_ids: Option<String>,
    /// String input that fuzzy searches on `condition.display` field.
    pub condition: Option<String>,
    /// Comma separated list of condition UUIDs.
    pub condition_ids: Option<String>,
    /// String input that fuzzy searches on `treatment.display` field.
    pub treatment: Option<String>,
    /// Comma separated list of treatment UUIDs.
    pub treatment_ids: Option<String>,
    /// String input of the type of clinical areas to return. Options for input are either `providers` or `locations`. Note: Defaults to returning all clinical areas of any type.
    pub r#type: Option<String>
}

/// struct for passing parameters to the method [`get_condition`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetConditionParams {
    /// The UUID of the target condition.
    pub condition_uuid: String
}

/// struct for passing parameters to the method [`get_conditions`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetConditionsParams {
    /// The page of the results which was returned.
    pub page: Option<i32>,
    /// How many results are in each page.
    pub page_size: Option<i32>,
    /// String input that fuzzy searches against key fields within each condition object to return the most relevant options.
    pub search: Option<String>,
    /// Comma separated list of condition UUIDs to exclude from search results.
    pub _excl_condition_ids: Option<String>,
    /// Comma separated list of specialty UUIDs.
    pub specialty_ids: Option<String>,
    /// String input of the type of clinical areas to return. Options for input are either `focus_areas` or `condition_cost_estimate`. Note: This input must be an exact string match to work
    pub module: Option<String>
}

/// struct for passing parameters to the method [`get_treatment`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetTreatmentParams {
    /// The UUID of the target treatment.
    pub treatment_uuid: String
}

/// struct for passing parameters to the method [`get_treatments`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetTreatmentsParams {
    /// The page of the results which was returned.
    pub page: Option<i32>,
    /// How many results are in each page.
    pub page_size: Option<i32>,
    /// String input that fuzzy searches against key fields within each treatment object to return the most relevant options.
    pub search: Option<String>,
    /// Comma separated list of treatment UUIDs to exclude from search results.
    pub _excl_treatment_ids: Option<String>,
    /// Comma separated list of specialty UUIDs.
    pub specialty_ids: Option<String>,
    /// String input of the type of clinical areas to return. Options for input are either `providers` or `locations`. Note: Defaults to returning all clinical areas of any type.
    pub r#type: Option<String>
}


#[async_trait]
impl FocusAreaEndpointsApi for FocusAreaEndpointsApiClient {
    /// Retrieve data on a specific clinical area. 
    async fn get_clinical_area(&self,  params: GetClinicalAreaParams ) -> Result<ResponseContent<GetClinicalAreaSuccess>, Error<GetClinicalAreaError>> {
        
        let GetClinicalAreaParams {
            clinical_area_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/clinical_areas/{clinical_area_uuid}", local_var_configuration.base_path, clinical_area_uuid=crate::apis::urlencode(clinical_area_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetClinicalAreaSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetClinicalAreaError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns clinical areas that exist within the Ribbon API. 
    async fn get_clinical_areas(&self,  params: GetClinicalAreasParams ) -> Result<ResponseContent<GetClinicalAreasSuccess>, Error<GetClinicalAreasError>> {
        
        let GetClinicalAreasParams {
            page,
            page_size,
            search,
            clinical_area,
            _excl_clinical_area_ids,
            specialty_ids,
            condition,
            condition_ids,
            treatment,
            treatment_ids,
            r#type,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/clinical_areas", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = clinical_area {
            local_var_req_builder = local_var_req_builder.query(&[("clinical_area", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_clinical_area_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_clinical_area_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = specialty_ids {
            local_var_req_builder = local_var_req_builder.query(&[("specialty_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = condition {
            local_var_req_builder = local_var_req_builder.query(&[("condition", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = condition_ids {
            local_var_req_builder = local_var_req_builder.query(&[("condition_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = treatment {
            local_var_req_builder = local_var_req_builder.query(&[("treatment", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = treatment_ids {
            local_var_req_builder = local_var_req_builder.query(&[("treatment_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = r#type {
            local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetClinicalAreasSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetClinicalAreasError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Retrieve data on a specific condition. 
    async fn get_condition(&self,  params: GetConditionParams ) -> Result<ResponseContent<GetConditionSuccess>, Error<GetConditionError>> {
        
        let GetConditionParams {
            condition_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/conditions/{condition_uuid}", local_var_configuration.base_path, condition_uuid=crate::apis::urlencode(condition_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetConditionSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetConditionError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns conditions that exist within the Ribbon API. 
    async fn get_conditions(&self,  params: GetConditionsParams ) -> Result<ResponseContent<GetConditionsSuccess>, Error<GetConditionsError>> {
        
        let GetConditionsParams {
            page,
            page_size,
            search,
            _excl_condition_ids,
            specialty_ids,
            module,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/conditions", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_condition_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_condition_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = specialty_ids {
            local_var_req_builder = local_var_req_builder.query(&[("specialty_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = module {
            local_var_req_builder = local_var_req_builder.query(&[("module", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetConditionsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetConditionsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Retrieve data on a specific treatment. 
    async fn get_treatment(&self,  params: GetTreatmentParams ) -> Result<ResponseContent<GetTreatmentSuccess>, Error<GetTreatmentError>> {
        
        let GetTreatmentParams {
            treatment_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/treatments/{treatment_uuid}", local_var_configuration.base_path, treatment_uuid=crate::apis::urlencode(treatment_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTreatmentSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTreatmentError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns treatments that exist within the Ribbon API. 
    async fn get_treatments(&self,  params: GetTreatmentsParams ) -> Result<ResponseContent<GetTreatmentsSuccess>, Error<GetTreatmentsError>> {
        
        let GetTreatmentsParams {
            page,
            page_size,
            search,
            _excl_treatment_ids,
            specialty_ids,
            r#type,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/treatments", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_treatment_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_treatment_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = specialty_ids {
            local_var_req_builder = local_var_req_builder.query(&[("specialty_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = r#type {
            local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTreatmentsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTreatmentsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed successes of method [`get_clinical_area`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetClinicalAreaSuccess {
    Status200(models::GetCustomProviders200ResponseParametersClinicalAreaIds),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_clinical_areas`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetClinicalAreasSuccess {
    Status200(models::GetClinicalAreas200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_condition`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConditionSuccess {
    Status200(models::GetCustomProviders200ResponseParametersClinicalAreaIdsConditionsInner),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_conditions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConditionsSuccess {
    Status200(models::GetConditions200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_treatment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTreatmentSuccess {
    Status200(models::GetCustomProviders200ResponseParametersClinicalAreaIdsTreatmentsInner),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_treatments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTreatmentsSuccess {
    Status200(models::GetTreatments200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_clinical_area`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetClinicalAreaError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_clinical_areas`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetClinicalAreasError {
    Status400(models::GetCustomProviders400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_condition`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConditionError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_conditions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetConditionsError {
    Status400(models::GetCustomProviders400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_treatment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTreatmentError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_treatments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTreatmentsError {
    UnknownValue(serde_json::Value),
}

