/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;

#[async_trait]
pub trait OrganizationsApi: Send + Sync {

    /// GET /custom/organizations/{organization_uuid}
    ///
    /// Retrieve detailed information for any organization given its UUID 
    async fn get_organization(&self,  params: GetOrganizationParams ) -> Result<ResponseContent<GetOrganizationSuccess>, Error<GetOrganizationError>>;

    /// GET /custom/organizations
    ///
    /// Search for different organizations.  #### Example Use Case Display a map of all of all nearby health systems and their relevant information so that a patient can find care. 
    async fn get_organizations(&self,  params: GetOrganizationsParams ) -> Result<ResponseContent<GetOrganizationsSuccess>, Error<GetOrganizationsError>>;
}

pub struct OrganizationsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl OrganizationsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`get_organization`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetOrganizationParams {
    /// The UUID of the target organization.
    pub organization_uuid: String
}

/// struct for passing parameters to the method [`get_organizations`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetOrganizationsParams {
    /// String input of an address that will be interpreted and geocoded in real time.
    pub address: Option<String>,
    /// String input that is fuzzy matched to against the `organization.name` field.
    pub name: Option<String>,
    /// Constrains the search to within this many miles of the center point
    pub distance: Option<i32>,
    /// Latitude/longitude pair of coordinates in lieu of a string address.
    pub location: Option<String>,
    /// The page of the results which was returned.
    pub page: Option<i32>,
    /// How many results are in each page.
    pub page_size: Option<i32>
}


#[async_trait]
impl OrganizationsApi for OrganizationsApiClient {
    /// Retrieve detailed information for any organization given its UUID 
    async fn get_organization(&self,  params: GetOrganizationParams ) -> Result<ResponseContent<GetOrganizationSuccess>, Error<GetOrganizationError>> {
        
        let GetOrganizationParams {
            organization_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/organizations/{organization_uuid}", local_var_configuration.base_path, organization_uuid=crate::apis::urlencode(organization_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetOrganizationSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetOrganizationError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Search for different organizations.  #### Example Use Case Display a map of all of all nearby health systems and their relevant information so that a patient can find care. 
    async fn get_organizations(&self,  params: GetOrganizationsParams ) -> Result<ResponseContent<GetOrganizationsSuccess>, Error<GetOrganizationsError>> {
        
        let GetOrganizationsParams {
            address,
            name,
            distance,
            location,
            page,
            page_size,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/organizations", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = address {
            local_var_req_builder = local_var_req_builder.query(&[("address", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = name {
            local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = distance {
            local_var_req_builder = local_var_req_builder.query(&[("distance", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = location {
            local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetOrganizationsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetOrganizationsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed successes of method [`get_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationSuccess {
    Status200(models::GetOrganizations200ResponseDataInner),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_organizations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationsSuccess {
    Status200(models::GetOrganizations200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_organizations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationsError {
    UnknownValue(serde_json::Value),
}

