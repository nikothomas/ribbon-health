/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;

#[async_trait]
pub trait CostEstimatesApi: Send + Sync {

    /// POST /eligibility
    ///
    /// Verify a member's current insurance coverage and benefits. You can access detailed information including a member’s progress on their Deductible and Out-of-pocket, as well as Copay and Coinsurance information for different services.  #### Example Use Case Inform a member of their current progress against their Deductible as well as their Copay and Coinsurance summaries so they can better estimate their out-of pocket costs. 
    async fn get_eligibility(&self,  params: GetEligibilityParams ) -> Result<ResponseContent<GetEligibilitySuccess>, Error<GetEligibilityError>>;

    /// GET /eligibility_insurance_partners/{insurance_partner}
    ///
    /// Fetch an insurance partner supported by our eligibility features. 
    async fn get_eligibility_insurance_partner(&self,  params: GetEligibilityInsurancePartnerParams ) -> Result<ResponseContent<GetEligibilityInsurancePartnerSuccess>, Error<GetEligibilityInsurancePartnerError>>;

    /// GET /eligibility_insurance_partners
    ///
    /// Search or list all insurance partners supported by our eligibility features. 
    async fn get_eligibility_insurance_partners(&self,  params: GetEligibilityInsurancePartnersParams ) -> Result<ResponseContent<GetEligibilityInsurancePartnersSuccess>, Error<GetEligibilityInsurancePartnersError>>;

    /// GET /procedure_cost_estimate
    ///
    /// Calculates estimated costs for a given procedure based on a user's location.  #### Example Use Case Estimate the cost of a knee replacement surgery for a user in Boston so they can plan their personal finances accordingly. 
    async fn get_procedure_cost_estimate(&self,  params: GetProcedureCostEstimateParams ) -> Result<ResponseContent<GetProcedureCostEstimateSuccess>, Error<GetProcedureCostEstimateError>>;
}

pub struct CostEstimatesApiClient {
    configuration: Arc<configuration::Configuration>
}

impl CostEstimatesApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`get_eligibility`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetEligibilityParams {
    /// Identifying information for the member to be checked
    pub get_eligibility_request: models::GetEligibilityRequest,
    /// Whether to return the full eligibility response from the payer. Defaults to `false` when not provided.
    pub include_full_response: Option<bool>
}

/// struct for passing parameters to the method [`get_eligibility_insurance_partner`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetEligibilityInsurancePartnerParams {
    /// The identifier for this insurance partner in the Ribbon API
    pub insurance_partner: String
}

/// struct for passing parameters to the method [`get_eligibility_insurance_partners`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetEligibilityInsurancePartnersParams {
    /// Fuzzy search input for insurance names
    pub search: Option<String>
}

/// struct for passing parameters to the method [`get_procedure_cost_estimate`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetProcedureCostEstimateParams {
    /// The UUIDs of the procedures to filter results to, as a comma-delimited string
    pub procedure_ids: String,
    /// The zip code of the member we are generating cost estimates for
    pub member_zip: String,
    /// The type of data to base cost estimates on: `claims` data or payer-filed `price_transparency` data. Defaults to `claims`.
    pub r#type: Option<String>,
    /// The UUID of the insurance plan to use when fetching negotiated rates with providers. Necessary only if searching for estimates using the 'price_transparency' `type`.
    pub plan_id: Option<String>
}


#[async_trait]
impl CostEstimatesApi for CostEstimatesApiClient {
    /// Verify a member's current insurance coverage and benefits. You can access detailed information including a member’s progress on their Deductible and Out-of-pocket, as well as Copay and Coinsurance information for different services.  #### Example Use Case Inform a member of their current progress against their Deductible as well as their Copay and Coinsurance summaries so they can better estimate their out-of pocket costs. 
    async fn get_eligibility(&self,  params: GetEligibilityParams ) -> Result<ResponseContent<GetEligibilitySuccess>, Error<GetEligibilityError>> {
        
        let GetEligibilityParams {
            get_eligibility_request,
            include_full_response,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/eligibility", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = include_full_response {
            local_var_req_builder = local_var_req_builder.query(&[("include_full_response", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&get_eligibility_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetEligibilitySuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetEligibilityError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Fetch an insurance partner supported by our eligibility features. 
    async fn get_eligibility_insurance_partner(&self,  params: GetEligibilityInsurancePartnerParams ) -> Result<ResponseContent<GetEligibilityInsurancePartnerSuccess>, Error<GetEligibilityInsurancePartnerError>> {
        
        let GetEligibilityInsurancePartnerParams {
            insurance_partner,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/eligibility_insurance_partners/{insurance_partner}", local_var_configuration.base_path, insurance_partner=crate::apis::urlencode(insurance_partner));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetEligibilityInsurancePartnerSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetEligibilityInsurancePartnerError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Search or list all insurance partners supported by our eligibility features. 
    async fn get_eligibility_insurance_partners(&self,  params: GetEligibilityInsurancePartnersParams ) -> Result<ResponseContent<GetEligibilityInsurancePartnersSuccess>, Error<GetEligibilityInsurancePartnersError>> {
        
        let GetEligibilityInsurancePartnersParams {
            search,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/eligibility_insurance_partners", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetEligibilityInsurancePartnersSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetEligibilityInsurancePartnersError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Calculates estimated costs for a given procedure based on a user's location.  #### Example Use Case Estimate the cost of a knee replacement surgery for a user in Boston so they can plan their personal finances accordingly. 
    async fn get_procedure_cost_estimate(&self,  params: GetProcedureCostEstimateParams ) -> Result<ResponseContent<GetProcedureCostEstimateSuccess>, Error<GetProcedureCostEstimateError>> {
        
        let GetProcedureCostEstimateParams {
            procedure_ids,
            member_zip,
            r#type,
            plan_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/procedure_cost_estimate", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        local_var_req_builder = local_var_req_builder.query(&[("procedure_ids", &procedure_ids.to_string())]);
        local_var_req_builder = local_var_req_builder.query(&[("member_zip", &member_zip.to_string())]);
        if let Some(ref local_var_str) = r#type {
            local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = plan_id {
            local_var_req_builder = local_var_req_builder.query(&[("plan_id", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetProcedureCostEstimateSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetProcedureCostEstimateError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed successes of method [`get_eligibility`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEligibilitySuccess {
    Status200(models::GetEligibility200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_eligibility_insurance_partner`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEligibilityInsurancePartnerSuccess {
    Status200(models::GetEligibilityInsurancePartners200ResponseDataInner),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_eligibility_insurance_partners`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEligibilityInsurancePartnersSuccess {
    Status200(models::GetEligibilityInsurancePartners200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_procedure_cost_estimate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProcedureCostEstimateSuccess {
    Status200(models::GetProcedureCostEstimate200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_eligibility`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEligibilityError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_eligibility_insurance_partner`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEligibilityInsurancePartnerError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_eligibility_insurance_partners`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEligibilityInsurancePartnersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_procedure_cost_estimate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProcedureCostEstimateError {
    UnknownValue(serde_json::Value),
}

