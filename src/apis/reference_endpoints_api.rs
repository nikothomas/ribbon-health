/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;

#[async_trait]
pub trait ReferenceEndpointsApi: Send + Sync {

    /// DELETE /custom/insurances/{insurance_uuid}
    ///
    /// Delete an insurance.  Note: If you've added this insurance to doctors, you are deleting all instances of this UUID, and Ribbon will not be able to regenerate them. 
    async fn delete_custom_insurance(&self,  params: DeleteCustomInsuranceParams ) -> Result<ResponseContent<DeleteCustomInsuranceSuccess>, Error<DeleteCustomInsuranceError>>;

    /// DELETE /custom/location_types/{location_type_uuid}
    ///
    /// Delete a location type.  Note: You cannot edit a Ribbon created location type. 
    async fn delete_custom_location_type(&self,  params: DeleteCustomLocationTypeParams ) -> Result<ResponseContent<DeleteCustomLocationTypeSuccess>, Error<DeleteCustomLocationTypeError>>;

    /// DELETE /custom/provider_types/{provider_type_uuid}
    ///
    /// Delete a provider type.  Note: You cannot edit a Ribbon created provider type. 
    async fn delete_custom_provider_type(&self,  params: DeleteCustomProviderTypeParams ) -> Result<ResponseContent<DeleteCustomProviderTypeSuccess>, Error<DeleteCustomProviderTypeError>>;

    /// DELETE /custom/specialties/{specialty_uuid}
    ///
    /// Delete a specialty.  Note: You cannot delete a Ribbon created specialty. 
    async fn delete_custom_specialty(&self,  params: DeleteCustomSpecialtyParams ) -> Result<ResponseContent<DeleteCustomSpecialtySuccess>, Error<DeleteCustomSpecialtyError>>;

    /// GET /custom/insurances/{insurance_uuid}
    ///
    /// Retrieve data on a specific insurance. 
    async fn get_custom_insurance(&self,  params: GetCustomInsuranceParams ) -> Result<ResponseContent<GetCustomInsuranceSuccess>, Error<GetCustomInsuranceError>>;

    /// GET /custom/location_types/{location_type_uuid}
    ///
    /// Retrieve data on a specific location type. 
    async fn get_custom_location_type(&self,  params: GetCustomLocationTypeParams ) -> Result<ResponseContent<GetCustomLocationTypeSuccess>, Error<GetCustomLocationTypeError>>;

    /// GET /location_types
    ///
    /// Search and list location types that exist within the Ribbon API. 
    async fn get_custom_location_types(&self,  params: GetCustomLocationTypesParams ) -> Result<ResponseContent<GetCustomLocationTypesSuccess>, Error<GetCustomLocationTypesError>>;

    /// GET /custom/provider_types/{provider_type_uuid}
    ///
    /// Retrieve data on a specific provider type. 
    async fn get_custom_provider_type(&self,  params: GetCustomProviderTypeParams ) -> Result<ResponseContent<GetCustomProviderTypeSuccess>, Error<GetCustomProviderTypeError>>;

    /// GET /provider_types
    ///
    /// Search and list provider types that exist within the Ribbon API. 
    async fn get_custom_provider_types(&self,  params: GetCustomProviderTypesParams ) -> Result<ResponseContent<GetCustomProviderTypesSuccess>, Error<GetCustomProviderTypesError>>;

    /// GET /custom/specialties/{specialty_uuid}
    ///
    /// Retrieve data on a specific specialty. 
    async fn get_custom_specialty(&self,  params: GetCustomSpecialtyParams ) -> Result<ResponseContent<GetCustomSpecialtySuccess>, Error<GetCustomSpecialtyError>>;

    /// GET /custom/insurances
    ///
    /// Search and list insurances that exist within the Ribbon API.
    async fn get_insurances(&self,  params: GetInsurancesParams ) -> Result<ResponseContent<GetInsurancesSuccess>, Error<GetInsurancesError>>;

    /// GET /languages
    ///
    /// Search and list provider languages that exist in the Ribbon API. 
    async fn get_languages(&self,  params: GetLanguagesParams ) -> Result<ResponseContent<GetLanguagesSuccess>, Error<GetLanguagesError>>;

    /// GET /procedures/{procedure_uuid}
    ///
    /// Retrieve data on a specific procedure. 
    async fn get_procedure(&self,  params: GetProcedureParams ) -> Result<ResponseContent<GetProcedureSuccess>, Error<GetProcedureError>>;

    /// GET /procedures
    ///
    /// Search and list procedures that exist within the Ribbon API. 
    async fn get_procedures(&self,  params: GetProceduresParams ) -> Result<ResponseContent<GetProceduresSuccess>, Error<GetProceduresError>>;

    /// GET /custom/specialties
    ///
    /// Search and list specialties that exist within the Ribbon API. 
    async fn get_specialties(&self,  params: GetSpecialtiesParams ) -> Result<ResponseContent<GetSpecialtiesSuccess>, Error<GetSpecialtiesError>>;

    /// POST /custom/insurances
    ///
    /// Create a insurance with desired field values. 
    async fn post_custom_insurance(&self,  params: PostCustomInsuranceParams ) -> Result<ResponseContent<PostCustomInsuranceSuccess>, Error<PostCustomInsuranceError>>;

    /// POST /custom/location_types
    ///
    /// Create a location type with desired field values. 
    async fn post_custom_location_type(&self,  params: PostCustomLocationTypeParams ) -> Result<ResponseContent<PostCustomLocationTypeSuccess>, Error<PostCustomLocationTypeError>>;

    /// POST /custom/provider_types
    ///
    /// Create a custom provider type with desired field values. 
    async fn post_custom_provider_type(&self,  params: PostCustomProviderTypeParams ) -> Result<ResponseContent<PostCustomProviderTypeSuccess>, Error<PostCustomProviderTypeError>>;

    /// POST /custom/specialties
    ///
    /// Create a custom specialty with desired field values. 
    async fn post_custom_specialty(&self,  params: PostCustomSpecialtyParams ) -> Result<ResponseContent<PostCustomSpecialtySuccess>, Error<PostCustomSpecialtyError>>;

    /// PUT /custom/insurances/{insurance_uuid}
    ///
    /// Edit fields of a custom created insurance or a Ribbon created insurance. 
    async fn put_custom_insurance(&self,  params: PutCustomInsuranceParams ) -> Result<ResponseContent<PutCustomInsuranceSuccess>, Error<PutCustomInsuranceError>>;

    /// PUT /custom/location_types/{location_type_uuid}
    ///
    /// Edit fields of a custom created location type.  Note: You cannot edit a Ribbon created location type. 
    async fn put_custom_location_type(&self,  params: PutCustomLocationTypeParams ) -> Result<ResponseContent<PutCustomLocationTypeSuccess>, Error<PutCustomLocationTypeError>>;

    /// PUT /custom/provider_types/{provider_type_uuid}
    ///
    /// Edit fields of a custom created provider type.  Note: You cannot edit a Ribbon created provider type. 
    async fn put_custom_provider_type(&self,  params: PutCustomProviderTypeParams ) -> Result<ResponseContent<PutCustomProviderTypeSuccess>, Error<PutCustomProviderTypeError>>;

    /// PUT /custom/specialties/{specialty_uuid}
    ///
    /// Edit fields of a custom created specialty.  Note: You cannot edit a Ribbon created specialty. 
    async fn put_custom_specialty(&self,  params: PutCustomSpecialtyParams ) -> Result<ResponseContent<PutCustomSpecialtySuccess>, Error<PutCustomSpecialtyError>>;
}

pub struct ReferenceEndpointsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl ReferenceEndpointsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`delete_custom_insurance`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteCustomInsuranceParams {
    /// The UUID of the target insurance.
    pub insurance_uuid: String
}

/// struct for passing parameters to the method [`delete_custom_location_type`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteCustomLocationTypeParams {
    /// The UUID of the target location type.
    pub location_type_uuid: String
}

/// struct for passing parameters to the method [`delete_custom_provider_type`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteCustomProviderTypeParams {
    /// The UUID of the target provider type.
    pub provider_type_uuid: String
}

/// struct for passing parameters to the method [`delete_custom_specialty`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteCustomSpecialtyParams {
    /// The UUID of the target specialty.
    pub specialty_uuid: String
}

/// struct for passing parameters to the method [`get_custom_insurance`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomInsuranceParams {
    /// The UUID of the target insurance.
    pub insurance_uuid: String
}

/// struct for passing parameters to the method [`get_custom_location_type`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomLocationTypeParams {
    /// The UUID of the target location type.
    pub location_type_uuid: String
}

/// struct for passing parameters to the method [`get_custom_location_types`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomLocationTypesParams {
    /// Search parameter for reference endpoints (Provider Type, Location Type, Languages)
    pub search: Option<String>
}

/// struct for passing parameters to the method [`get_custom_provider_type`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomProviderTypeParams {
    /// The UUID of the target provider type.
    pub provider_type_uuid: String
}

/// struct for passing parameters to the method [`get_custom_provider_types`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomProviderTypesParams {
    /// Search parameter for reference endpoints (Provider Type, Location Type, Languages)
    pub search: Option<String>
}

/// struct for passing parameters to the method [`get_custom_specialty`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomSpecialtyParams {
    /// The UUID of the target specialty.
    pub specialty_uuid: String
}

/// struct for passing parameters to the method [`get_insurances`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetInsurancesParams {
    /// String input that fuzzy searches across `display_name`, `carrier_name`, and `uuid`.
    pub search: Option<String>,
    /// Comma separated list of the carrier association of insurances you are searching for.  Note: This input must be an exact string match to work
    pub carrier_association: Option<String>,
    /// Comma separated list of the carrier brand of insurances you are searching for.  Note: This input must be an exact string match to work
    pub carrier_brand: Option<String>,
    /// Comma separated list of the carrier name of insurances you are searching for.  Note: This input must be an exact string match to work
    pub carrier_name: Option<String>,
    /// Two letter abbreviated state code of insurances you are searching for.
    pub state: Option<String>,
    /// Exact string input of the plan name of insurances you are searching for.
    pub plan_name: Option<String>,
    /// Exact string input of the plan type of insurances you are searching for.
    pub plan_type: Option<String>,
    /// Exact string input of the display name of insurances you are searching for.
    pub display_name: Option<String>,
    /// Comma separated list of the category of insurances you are searching for.  Note: This input must be an exact string match to work
    pub category: Option<String>,
    /// Comma separated list of the category of insurances you wish to exclude.  Note: This input must be an exact string match to work
    pub _excl_category: Option<String>,
    /// Single code input to search for plans with an exact string match within the codes field.
    pub codes: Option<String>,
    /// Partial string input to match to the codes field. For Medicare Advantage plans this is a contract ID (i.e. H9572). For Federal or State Exchange plans this is the first 10 digits of the HIOS ID (i.e. 36096il100)  Note: This parameter can only be used if the `category` param is also utilized with a single category value.
    pub partial_codes: Option<String>
}

/// struct for passing parameters to the method [`get_languages`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetLanguagesParams {
    /// Search parameter for reference endpoints (Provider Type, Location Type, Languages)
    pub search: Option<String>
}

/// struct for passing parameters to the method [`get_procedure`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetProcedureParams {
    /// The UUID of the target procedure.
    pub procedure_uuid: String
}

/// struct for passing parameters to the method [`get_procedures`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetProceduresParams {
    /// Search parameter for reference endpoints (Provider Type, Location Type, Languages)
    pub search: Option<String>,
    /// A specific billing code (e.g., CPT, DRG) to search for
    pub procedure_code: Option<String>,
    /// The page of the results which was returned.
    pub page: Option<i32>,
    /// How many results are in each page.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method [`get_specialties`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetSpecialtiesParams {
    /// The page of the results which was returned.
    pub page: Option<i32>,
    /// How many results are in each page.
    pub page_size: Option<i32>,
    /// String input that fuzzy searches against key fields within each specialties object to return the most relevant options.
    pub search: Option<String>,
    /// 'Type' of provider specialty to filter results on. Here are a few key provider types: - Doctor - Nursing - Dental Providers
    pub provider_type: Option<String>
}

/// struct for passing parameters to the method [`post_custom_insurance`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PostCustomInsuranceParams {
    /// A JSON object mapping the name of the field to update to its new value
    pub post_custom_insurance_request: models::PostCustomInsuranceRequest
}

/// struct for passing parameters to the method [`post_custom_location_type`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PostCustomLocationTypeParams {
    /// A JSON object mapping the name of the field to update to its new value
    pub post_custom_provider_type_request: models::PostCustomProviderTypeRequest
}

/// struct for passing parameters to the method [`post_custom_provider_type`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PostCustomProviderTypeParams {
    /// A JSON object mapping the name of the field to update to its new value
    pub post_custom_provider_type_request: models::PostCustomProviderTypeRequest
}

/// struct for passing parameters to the method [`post_custom_specialty`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PostCustomSpecialtyParams {
    /// A JSON object mapping the name of the field to update to its new value
    pub post_custom_specialty_request: models::PostCustomSpecialtyRequest
}

/// struct for passing parameters to the method [`put_custom_insurance`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomInsuranceParams {
    /// The UUID of the target insurance.
    pub insurance_uuid: String,
    /// A JSON object mapping the name of the field to update to its new value
    pub post_custom_insurance_request: models::PostCustomInsuranceRequest
}

/// struct for passing parameters to the method [`put_custom_location_type`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomLocationTypeParams {
    /// The UUID of the target location type.
    pub location_type_uuid: String,
    /// A JSON object mapping the name of the field to update to its new value
    pub post_custom_provider_type_request: models::PostCustomProviderTypeRequest
}

/// struct for passing parameters to the method [`put_custom_provider_type`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomProviderTypeParams {
    /// The UUID of the target provider type.
    pub provider_type_uuid: String,
    /// A JSON object mapping the name of the field to update to its new value
    pub post_custom_provider_type_request: models::PostCustomProviderTypeRequest
}

/// struct for passing parameters to the method [`put_custom_specialty`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomSpecialtyParams {
    /// The UUID of the target specialty.
    pub specialty_uuid: String,
    /// A JSON object mapping the name of the field to update to its new value
    pub post_custom_specialty_request: models::PostCustomSpecialtyRequest
}


#[async_trait]
impl ReferenceEndpointsApi for ReferenceEndpointsApiClient {
    /// Delete an insurance.  Note: If you've added this insurance to doctors, you are deleting all instances of this UUID, and Ribbon will not be able to regenerate them. 
    async fn delete_custom_insurance(&self,  params: DeleteCustomInsuranceParams ) -> Result<ResponseContent<DeleteCustomInsuranceSuccess>, Error<DeleteCustomInsuranceError>> {
        
        let DeleteCustomInsuranceParams {
            insurance_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/insurances/{insurance_uuid}", local_var_configuration.base_path, insurance_uuid=crate::apis::urlencode(insurance_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<DeleteCustomInsuranceSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<DeleteCustomInsuranceError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Delete a location type.  Note: You cannot edit a Ribbon created location type. 
    async fn delete_custom_location_type(&self,  params: DeleteCustomLocationTypeParams ) -> Result<ResponseContent<DeleteCustomLocationTypeSuccess>, Error<DeleteCustomLocationTypeError>> {
        
        let DeleteCustomLocationTypeParams {
            location_type_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/location_types/{location_type_uuid}", local_var_configuration.base_path, location_type_uuid=crate::apis::urlencode(location_type_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<DeleteCustomLocationTypeSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<DeleteCustomLocationTypeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Delete a provider type.  Note: You cannot edit a Ribbon created provider type. 
    async fn delete_custom_provider_type(&self,  params: DeleteCustomProviderTypeParams ) -> Result<ResponseContent<DeleteCustomProviderTypeSuccess>, Error<DeleteCustomProviderTypeError>> {
        
        let DeleteCustomProviderTypeParams {
            provider_type_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/provider_types/{provider_type_uuid}", local_var_configuration.base_path, provider_type_uuid=crate::apis::urlencode(provider_type_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<DeleteCustomProviderTypeSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<DeleteCustomProviderTypeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Delete a specialty.  Note: You cannot delete a Ribbon created specialty. 
    async fn delete_custom_specialty(&self,  params: DeleteCustomSpecialtyParams ) -> Result<ResponseContent<DeleteCustomSpecialtySuccess>, Error<DeleteCustomSpecialtyError>> {
        
        let DeleteCustomSpecialtyParams {
            specialty_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/specialties/{specialty_uuid}", local_var_configuration.base_path, specialty_uuid=crate::apis::urlencode(specialty_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<DeleteCustomSpecialtySuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<DeleteCustomSpecialtyError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Retrieve data on a specific insurance. 
    async fn get_custom_insurance(&self,  params: GetCustomInsuranceParams ) -> Result<ResponseContent<GetCustomInsuranceSuccess>, Error<GetCustomInsuranceError>> {
        
        let GetCustomInsuranceParams {
            insurance_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/insurances/{insurance_uuid}", local_var_configuration.base_path, insurance_uuid=crate::apis::urlencode(insurance_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomInsuranceSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomInsuranceError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Retrieve data on a specific location type. 
    async fn get_custom_location_type(&self,  params: GetCustomLocationTypeParams ) -> Result<ResponseContent<GetCustomLocationTypeSuccess>, Error<GetCustomLocationTypeError>> {
        
        let GetCustomLocationTypeParams {
            location_type_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/location_types/{location_type_uuid}", local_var_configuration.base_path, location_type_uuid=crate::apis::urlencode(location_type_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomLocationTypeSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomLocationTypeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Search and list location types that exist within the Ribbon API. 
    async fn get_custom_location_types(&self,  params: GetCustomLocationTypesParams ) -> Result<ResponseContent<GetCustomLocationTypesSuccess>, Error<GetCustomLocationTypesError>> {
        
        let GetCustomLocationTypesParams {
            search,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/location_types", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomLocationTypesSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomLocationTypesError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Retrieve data on a specific provider type. 
    async fn get_custom_provider_type(&self,  params: GetCustomProviderTypeParams ) -> Result<ResponseContent<GetCustomProviderTypeSuccess>, Error<GetCustomProviderTypeError>> {
        
        let GetCustomProviderTypeParams {
            provider_type_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/provider_types/{provider_type_uuid}", local_var_configuration.base_path, provider_type_uuid=crate::apis::urlencode(provider_type_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomProviderTypeSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomProviderTypeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Search and list provider types that exist within the Ribbon API. 
    async fn get_custom_provider_types(&self,  params: GetCustomProviderTypesParams ) -> Result<ResponseContent<GetCustomProviderTypesSuccess>, Error<GetCustomProviderTypesError>> {
        
        let GetCustomProviderTypesParams {
            search,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/provider_types", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomProviderTypesSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomProviderTypesError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Retrieve data on a specific specialty. 
    async fn get_custom_specialty(&self,  params: GetCustomSpecialtyParams ) -> Result<ResponseContent<GetCustomSpecialtySuccess>, Error<GetCustomSpecialtyError>> {
        
        let GetCustomSpecialtyParams {
            specialty_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/specialties/{specialty_uuid}", local_var_configuration.base_path, specialty_uuid=crate::apis::urlencode(specialty_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomSpecialtySuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomSpecialtyError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Search and list insurances that exist within the Ribbon API.
    async fn get_insurances(&self,  params: GetInsurancesParams ) -> Result<ResponseContent<GetInsurancesSuccess>, Error<GetInsurancesError>> {
        
        let GetInsurancesParams {
            search,
            carrier_association,
            carrier_brand,
            carrier_name,
            state,
            plan_name,
            plan_type,
            display_name,
            category,
            _excl_category,
            codes,
            partial_codes,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/insurances", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = carrier_association {
            local_var_req_builder = local_var_req_builder.query(&[("carrier_association", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = carrier_brand {
            local_var_req_builder = local_var_req_builder.query(&[("carrier_brand", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = carrier_name {
            local_var_req_builder = local_var_req_builder.query(&[("carrier_name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = state {
            local_var_req_builder = local_var_req_builder.query(&[("state", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = plan_name {
            local_var_req_builder = local_var_req_builder.query(&[("plan_name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = plan_type {
            local_var_req_builder = local_var_req_builder.query(&[("plan_type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = display_name {
            local_var_req_builder = local_var_req_builder.query(&[("display_name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = category {
            local_var_req_builder = local_var_req_builder.query(&[("category", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_category {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_category", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = codes {
            local_var_req_builder = local_var_req_builder.query(&[("codes", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = partial_codes {
            local_var_req_builder = local_var_req_builder.query(&[("partial_codes", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetInsurancesSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetInsurancesError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Search and list provider languages that exist in the Ribbon API. 
    async fn get_languages(&self,  params: GetLanguagesParams ) -> Result<ResponseContent<GetLanguagesSuccess>, Error<GetLanguagesError>> {
        
        let GetLanguagesParams {
            search,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/languages", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetLanguagesSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetLanguagesError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Retrieve data on a specific procedure. 
    async fn get_procedure(&self,  params: GetProcedureParams ) -> Result<ResponseContent<GetProcedureSuccess>, Error<GetProcedureError>> {
        
        let GetProcedureParams {
            procedure_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/procedures/{procedure_uuid}", local_var_configuration.base_path, procedure_uuid=crate::apis::urlencode(procedure_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetProcedureSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetProcedureError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Search and list procedures that exist within the Ribbon API. 
    async fn get_procedures(&self,  params: GetProceduresParams ) -> Result<ResponseContent<GetProceduresSuccess>, Error<GetProceduresError>> {
        
        let GetProceduresParams {
            search,
            procedure_code,
            page,
            page_size,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/procedures", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = procedure_code {
            local_var_req_builder = local_var_req_builder.query(&[("procedure_code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetProceduresSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetProceduresError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Search and list specialties that exist within the Ribbon API. 
    async fn get_specialties(&self,  params: GetSpecialtiesParams ) -> Result<ResponseContent<GetSpecialtiesSuccess>, Error<GetSpecialtiesError>> {
        
        let GetSpecialtiesParams {
            page,
            page_size,
            search,
            provider_type,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/specialties", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = provider_type {
            local_var_req_builder = local_var_req_builder.query(&[("provider_type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetSpecialtiesSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetSpecialtiesError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Create a insurance with desired field values. 
    async fn post_custom_insurance(&self,  params: PostCustomInsuranceParams ) -> Result<ResponseContent<PostCustomInsuranceSuccess>, Error<PostCustomInsuranceError>> {
        
        let PostCustomInsuranceParams {
            post_custom_insurance_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/insurances", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&post_custom_insurance_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PostCustomInsuranceSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PostCustomInsuranceError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Create a location type with desired field values. 
    async fn post_custom_location_type(&self,  params: PostCustomLocationTypeParams ) -> Result<ResponseContent<PostCustomLocationTypeSuccess>, Error<PostCustomLocationTypeError>> {
        
        let PostCustomLocationTypeParams {
            post_custom_provider_type_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/location_types", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&post_custom_provider_type_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PostCustomLocationTypeSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PostCustomLocationTypeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Create a custom provider type with desired field values. 
    async fn post_custom_provider_type(&self,  params: PostCustomProviderTypeParams ) -> Result<ResponseContent<PostCustomProviderTypeSuccess>, Error<PostCustomProviderTypeError>> {
        
        let PostCustomProviderTypeParams {
            post_custom_provider_type_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/provider_types", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&post_custom_provider_type_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PostCustomProviderTypeSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PostCustomProviderTypeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Create a custom specialty with desired field values. 
    async fn post_custom_specialty(&self,  params: PostCustomSpecialtyParams ) -> Result<ResponseContent<PostCustomSpecialtySuccess>, Error<PostCustomSpecialtyError>> {
        
        let PostCustomSpecialtyParams {
            post_custom_specialty_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/specialties", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&post_custom_specialty_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PostCustomSpecialtySuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PostCustomSpecialtyError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit fields of a custom created insurance or a Ribbon created insurance. 
    async fn put_custom_insurance(&self,  params: PutCustomInsuranceParams ) -> Result<ResponseContent<PutCustomInsuranceSuccess>, Error<PutCustomInsuranceError>> {
        
        let PutCustomInsuranceParams {
            insurance_uuid,
            post_custom_insurance_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/insurances/{insurance_uuid}", local_var_configuration.base_path, insurance_uuid=crate::apis::urlencode(insurance_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&post_custom_insurance_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomInsuranceSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomInsuranceError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit fields of a custom created location type.  Note: You cannot edit a Ribbon created location type. 
    async fn put_custom_location_type(&self,  params: PutCustomLocationTypeParams ) -> Result<ResponseContent<PutCustomLocationTypeSuccess>, Error<PutCustomLocationTypeError>> {
        
        let PutCustomLocationTypeParams {
            location_type_uuid,
            post_custom_provider_type_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/location_types/{location_type_uuid}", local_var_configuration.base_path, location_type_uuid=crate::apis::urlencode(location_type_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&post_custom_provider_type_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomLocationTypeSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomLocationTypeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit fields of a custom created provider type.  Note: You cannot edit a Ribbon created provider type. 
    async fn put_custom_provider_type(&self,  params: PutCustomProviderTypeParams ) -> Result<ResponseContent<PutCustomProviderTypeSuccess>, Error<PutCustomProviderTypeError>> {
        
        let PutCustomProviderTypeParams {
            provider_type_uuid,
            post_custom_provider_type_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/provider_types/{provider_type_uuid}", local_var_configuration.base_path, provider_type_uuid=crate::apis::urlencode(provider_type_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&post_custom_provider_type_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomProviderTypeSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomProviderTypeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit fields of a custom created specialty.  Note: You cannot edit a Ribbon created specialty. 
    async fn put_custom_specialty(&self,  params: PutCustomSpecialtyParams ) -> Result<ResponseContent<PutCustomSpecialtySuccess>, Error<PutCustomSpecialtyError>> {
        
        let PutCustomSpecialtyParams {
            specialty_uuid,
            post_custom_specialty_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/specialties/{specialty_uuid}", local_var_configuration.base_path, specialty_uuid=crate::apis::urlencode(specialty_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&post_custom_specialty_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomSpecialtySuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomSpecialtyError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed successes of method [`delete_custom_insurance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomInsuranceSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_custom_location_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomLocationTypeSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_custom_provider_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomProviderTypeSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_custom_specialty`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomSpecialtySuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_insurance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomInsuranceSuccess {
    Status200(models::GetCustomProviders200ResponseDataInnerInsurancesInner),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_location_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomLocationTypeSuccess {
    Status200(models::GetCustomLocationTypes200ResponseResultsInner),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_location_types`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomLocationTypesSuccess {
    Status200(models::GetCustomLocationTypes200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_provider_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomProviderTypeSuccess {
    Status200(models::GetCustomProviderTypes200ResponseResultsInner),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_provider_types`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomProviderTypesSuccess {
    Status200(models::GetCustomProviderTypes200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_specialty`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomSpecialtySuccess {
    Status200(models::GetCustomProviders200ResponseParametersSpecialty),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_insurances`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInsurancesSuccess {
    Status200(models::GetInsurances200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_languages`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLanguagesSuccess {
    Status200(models::GetLanguages200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_procedure`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProcedureSuccess {
    Status200(models::GetCustomProviders200ResponseParametersProcedure),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_procedures`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProceduresSuccess {
    Status200(models::GetProcedures200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_specialties`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSpecialtiesSuccess {
    Status200(models::GetSpecialties200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`post_custom_insurance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCustomInsuranceSuccess {
    Status201(models::PostCustomInsurance201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`post_custom_location_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCustomLocationTypeSuccess {
    Status201(models::PostCustomLocationType201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`post_custom_provider_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCustomProviderTypeSuccess {
    Status201(models::PostCustomProviderType201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`post_custom_specialty`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCustomSpecialtySuccess {
    Status201(models::PostCustomSpecialty201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_insurance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomInsuranceSuccess {
    Status200(models::PostCustomInsurance201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_location_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomLocationTypeSuccess {
    Status200(models::PostCustomLocationType201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_provider_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderTypeSuccess {
    Status200(models::PostCustomProviderType201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_specialty`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomSpecialtySuccess {
    Status200(models::PostCustomSpecialty201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_custom_insurance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomInsuranceError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_custom_location_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomLocationTypeError {
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_custom_provider_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomProviderTypeError {
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_custom_specialty`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomSpecialtyError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_insurance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomInsuranceError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_location_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomLocationTypeError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_location_types`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomLocationTypesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_provider_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomProviderTypeError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_provider_types`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomProviderTypesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_specialty`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomSpecialtyError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_insurances`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInsurancesError {
    Status400(models::GetCustomProviders400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_languages`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLanguagesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_procedure`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProcedureError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_procedures`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProceduresError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_specialties`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSpecialtiesError {
    Status403(models::GetCustomProviders403Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_custom_insurance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCustomInsuranceError {
    Status400(models::GetCustomProviders400Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_custom_location_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCustomLocationTypeError {
    Status400(models::GetCustomProviders400Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_custom_provider_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCustomProviderTypeError {
    Status400(models::GetCustomProviders400Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_custom_specialty`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCustomSpecialtyError {
    Status400(models::GetCustomProviders400Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_insurance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomInsuranceError {
    Status400(models::GetCustomProviders400Response),
    Status404(models::GetCustomProvider404Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_location_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomLocationTypeError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_provider_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderTypeError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_specialty`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomSpecialtyError {
    Status400(models::GetCustomProviders400Response),
    Status404(models::GetCustomProvider404Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

