/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;

#[async_trait]
pub trait TinsApi: Send + Sync {

    /// GET /custom/tin/{tin_id}
    ///
    /// Retrieve data on a specific TIN. 
    async fn get_custom_tin(&self,  params: GetCustomTinParams ) -> Result<ResponseContent<GetCustomTinSuccess>, Error<GetCustomTinError>>;

    /// GET /custom/tin
    ///
    /// Search and list tins that exist within the Ribbon API. 
    async fn get_tins(&self,  params: GetTinsParams ) -> Result<ResponseContent<GetTinsSuccess>, Error<GetTinsError>>;
}

pub struct TinsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl TinsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`get_custom_tin`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomTinParams {
    /// The target TIN.
    pub tin_id: String
}

/// struct for passing parameters to the method [`get_tins`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetTinsParams {
    /// String input that fuzzy searches across tins, name, address, and legal_name.
    pub search: Option<String>,
    /// The billing entity name that appears on claims data, or if available, the official legal name of the billing entity. String input that is fuzzy matched against the `name` field. Note: This parameter will not match with the `legal_name` field, only the `name` field.
    pub name: Option<String>,
    /// The legal name of the entity associated with the TIN. String input that is fuzzy matched against the `legal_name` field.
    pub legal_name: Option<String>,
    /// Comma separated list of TINs. Note: This parameter cannot be used in combination with any other parameters.
    pub tin_ids: Option<String>,
    /// Boolean input that applies to tin_confirmed field.
    pub has_tin: Option<bool>,
    /// The page of the results which was returned.
    pub page: Option<i32>,
    /// How many results are in each page.
    pub page_size: Option<i32>
}


#[async_trait]
impl TinsApi for TinsApiClient {
    /// Retrieve data on a specific TIN. 
    async fn get_custom_tin(&self,  params: GetCustomTinParams ) -> Result<ResponseContent<GetCustomTinSuccess>, Error<GetCustomTinError>> {
        
        let GetCustomTinParams {
            tin_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/tin/{tin_id}", local_var_configuration.base_path, tin_id=crate::apis::urlencode(tin_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomTinSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomTinError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Search and list tins that exist within the Ribbon API. 
    async fn get_tins(&self,  params: GetTinsParams ) -> Result<ResponseContent<GetTinsSuccess>, Error<GetTinsError>> {
        
        let GetTinsParams {
            search,
            name,
            legal_name,
            tin_ids,
            has_tin,
            page,
            page_size,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/tin", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = search {
            local_var_req_builder = local_var_req_builder.query(&[("search", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = name {
            local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = legal_name {
            local_var_req_builder = local_var_req_builder.query(&[("legal_name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = tin_ids {
            local_var_req_builder = local_var_req_builder.query(&[("tin_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = has_tin {
            local_var_req_builder = local_var_req_builder.query(&[("has_tin", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTinsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTinsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed successes of method [`get_custom_tin`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomTinSuccess {
    Status200(models::GetTins200ResponseTinsInner),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_tins`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTinsSuccess {
    Status200(models::GetTins200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_tin`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomTinError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_tins`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTinsError {
    Status403(models::GetCustomProviders403Response),
    UnknownValue(serde_json::Value),
}

