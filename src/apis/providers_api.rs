/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;

#[async_trait]
pub trait ProvidersApi: Send + Sync {

    /// GET /custom/providers/{npi}
    ///
    /// Retrieve detailed information for any provider given their NPI, such as locations, contact information, education, patient satisfaction, etc. 
    async fn get_custom_provider(&self,  params: GetCustomProviderParams ) -> Result<ResponseContent<GetCustomProviderSuccess>, Error<GetCustomProviderError>>;

    /// GET /custom/providers
    ///
    /// Allows you to quickly list doctors based on important search criteria.
    async fn get_custom_providers(&self,  params: GetCustomProvidersParams ) -> Result<ResponseContent<GetCustomProvidersSuccess>, Error<GetCustomProvidersError>>;

    /// PUT /custom/providers/{npi}
    ///
    /// Edit all fields that do not fall under `specialties`, `locations`, or `insurances`. You may also add new fields or remove existing fields.  #### Looking For The Old Documentation? We're in the process of revamping our documentation. You can find the old page for this endpoint [here](https://ribbon.readme.io/docs/add-or-edit-provider-fields-old). 
    async fn put_custom_provider(&self,  params: PutCustomProviderParams ) -> Result<ResponseContent<PutCustomProviderSuccess>, Error<PutCustomProviderError>>;

    /// PUT /custom/providers/{npi}/clinical_areas
    ///
    /// Add or remove clinical areas for a provider using our standard clinical area UUIDs. 
    async fn put_custom_provider_clinical_areas(&self,  params: PutCustomProviderClinicalAreasParams ) -> Result<ResponseContent<PutCustomProviderClinicalAreasSuccess>, Error<PutCustomProviderClinicalAreasError>>;

    /// PUT /custom/providers/{npi}/locations/{location_uuid}
    ///
    /// Edit all fields that do not fall under `uuid`, `google_maps_link`, `latitude`, or `longitude`. You may also add new fields or remove existing fields. These updates are provider-specific and will not affect other providers practicing at the same location. 
    async fn put_custom_provider_location(&self,  params: PutCustomProviderLocationParams ) -> Result<ResponseContent<PutCustomProviderLocationSuccess>, Error<PutCustomProviderLocationError>>;

    /// PUT /custom/providers/{npi}/locations/{location_uuid}/insurances
    ///
    /// Add or remove insurances accepted by a provider at a specific location using our standard insurance UUIDs. 
    async fn put_custom_provider_location_insurances(&self,  params: PutCustomProviderLocationInsurancesParams ) -> Result<ResponseContent<PutCustomProviderLocationInsurancesSuccess>, Error<PutCustomProviderLocationInsurancesError>>;

    /// PUT /custom/providers/{npi}/locations/{location_uuid}/organizations
    ///
    /// Add or remove organizations accepted by a provider at a specific location using our standard organization UUIDs. 
    async fn put_custom_provider_location_organizations(&self,  params: PutCustomProviderLocationOrganizationsParams ) -> Result<ResponseContent<PutCustomProviderLocationOrganizationsSuccess>, Error<PutCustomProviderLocationOrganizationsError>>;

    /// PUT /custom/providers/{npi}/locations
    ///
    /// Add or remove locations a provider practices at using our standard location UUIDs. 
    async fn put_custom_provider_locations(&self,  params: PutCustomProviderLocationsParams ) -> Result<ResponseContent<PutCustomProviderLocationsSuccess>, Error<PutCustomProviderLocationsError>>;

    /// PUT /custom/providers/{npi}/specialties/{specialty_uuid}
    ///
    /// Edit whether a single specialty is one of the provider's primary specialties. 
    async fn put_custom_provider_primary_specialties(&self,  params: PutCustomProviderPrimarySpecialtiesParams ) -> Result<ResponseContent<PutCustomProviderPrimarySpecialtiesSuccess>, Error<PutCustomProviderPrimarySpecialtiesError>>;

    /// PUT /custom/providers/{npi}/procedures
    ///
    /// Add or remove procedures for a provider using our standard procedure UUIDs. 
    async fn put_custom_provider_procedures(&self,  params: PutCustomProviderProceduresParams ) -> Result<ResponseContent<PutCustomProviderProceduresSuccess>, Error<PutCustomProviderProceduresError>>;

    /// PUT /custom/providers/{npi}/specialties
    ///
    /// Add or remove specialties for a provider using our standard specialty UUIDs. 
    async fn put_custom_provider_specialties(&self,  params: PutCustomProviderSpecialtiesParams ) -> Result<ResponseContent<PutCustomProviderSpecialtiesSuccess>, Error<PutCustomProviderSpecialtiesError>>;
}

pub struct ProvidersApiClient {
    configuration: Arc<configuration::Configuration>
}

impl ProvidersApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`get_custom_provider`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomProviderParams {
    /// The 10-digit National Provider Identifier (NPI) of the healthcare provider to fetch.
    pub npi: String,
    /// If provided, returns only up to this many insurances per provider. Useful to limit the amount of data returned when you do not need the entire list of accepted insurances.
    pub max_insurances: Option<i32>
}

/// struct for passing parameters to the method [`get_custom_providers`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomProvidersParams {
    /// The page number to return.
    pub page: Option<i32>,
    /// Number of items per page.
    pub page_size: Option<i32>,
    /// Max number of locations returned per provider.
    pub max_locations: Option<i32>,
    /// Comma-separated list of fields to include.
    pub fields: Option<String>,
    /// Comma-separated list of fields to exclude.
    pub _excl_fields: Option<String>,
    /// A comma-separated list of NPIs to filter on.
    pub npis: Option<String>,
    /// Provider's name or partial name to search.
    pub name: Option<String>,
    /// Comma-separated list of provider types to include.
    pub provider_types: Option<String>,
    /// Comma-separated list of provider types to exclude.
    pub _excl_provider_types: Option<String>,
    /// Filter providers by gender (e.g., 'm', 'f').
    pub gender: Option<String>,
    /// Maximum provider age to include.
    pub max_age: Option<i32>,
    /// Minimum provider age to include.
    pub min_age: Option<i32>,
    /// Provider's language (or comma-separated languages).
    pub language: Option<String>,
    /// Language(s) to exclude.
    pub _excl_language: Option<String>,
    /// Minimum star rating allowed.
    pub min_rating: Option<i32>,
    /// Free-text address to search.
    pub address: Option<String>,
    /// Comma-separated list of location IDs to include.
    pub location_ids: Option<String>,
    /// Comma-separated list of location IDs to exclude.
    pub _excl_location_ids: Option<String>,
    /// A latitude,longitude pair for proximity searching.
    pub location: Option<String>,
    /// Minimum location confidence score to include.
    pub min_location_confidence: Option<i32>,
    /// (Synonym to min_location_confidence, if used.)
    pub min_confidence: Option<i32>,
    /// Distance in miles from the given location.
    pub distance: Option<f64>,
    /// Two-letter US state code (e.g., \"NY\").
    pub state: Option<String>,
    /// Comma-separated insurance IDs to include.
    pub insurance_ids: Option<String>,
    /// Comma-separated insurance IDs to exclude.
    pub _excl_insurance_ids: Option<String>,
    /// Filter providers by insurance carrier name.
    pub insurance_carrier_name: Option<String>,
    /// Comma-separated insurance IDs applicable at certain locations.
    pub location_insurance_ids: Option<String>,
    /// Comma-separated insurance IDs to exclude at locations.
    pub _excl_location_insurance_ids: Option<String>,
    /// True if searching for BlueCard or national Blue network coverage.
    pub national_bluecard: Option<bool>,
    /// Comma-separated list of specialty IDs to include.
    pub specialty_ids: Option<String>,
    /// Comma-separated list of specialty IDs to exclude.
    pub _excl_specialty_ids: Option<String>,
    /// Specialty name to include.
    pub specialty: Option<String>,
    /// Comma-separated list of primary specialty IDs to include.
    pub specialty_ids_primary: Option<String>,
    /// Comma-separated list of primary specialty IDs to exclude.
    pub _excl_specialty_ids_primary: Option<String>,
    /// Primary specialty name to include.
    pub specialty_primary: Option<String>,
    /// Whether to group related specialties automatically.
    pub apply_specialty_grouping: Option<bool>,
    /// Comma-separated list of procedure IDs to include.
    pub procedure_ids: Option<String>,
    /// Comma-separated list of procedure IDs to exclude.
    pub _excl_procedure_ids: Option<String>,
    /// Procedure name to include.
    pub procedure: Option<String>,
    /// Minimum experience index of providers for the given procedure.
    pub min_experience_index: Option<i32>,
    /// Maximum allowed cost index for the given procedure.
    pub max_cost_index: Option<i32>,
    /// Name of the clinical area to filter on.
    pub clinical_area: Option<String>,
    /// Comma-separated clinical area IDs to include.
    pub clinical_area_ids: Option<String>,
    /// Comma-separated clinical area IDs to exclude.
    pub _excl_clinical_area_ids: Option<String>,
    /// Name of the condition to filter on.
    pub condition: Option<String>,
    /// Comma-separated condition IDs to include.
    pub condition_ids: Option<String>,
    /// Comma-separated condition IDs to exclude.
    pub _excl_condition_ids: Option<String>,
    /// Treatment name to filter on.
    pub treatment: Option<String>,
    /// Comma-separated treatment IDs to include.
    pub treatment_ids: Option<String>,
    /// Comma-separated treatment IDs to exclude.
    pub _excl_treatment_ids: Option<String>,
    /// Comma-separated age panels to include.
    pub panel_ages: Option<String>,
    /// Comma-separated age panels to exclude.
    pub _excl_panel_ages: Option<String>,
    /// Filter for sexes or gender categories (e.g., 'Primarily female').
    pub panel_sexes: Option<String>,
    /// Minimal acceptable outcomes score/index.
    pub min_outcomes_index: Option<i32>,
    /// Minimal acceptable efficiency score/index.
    pub min_efficiency_index: Option<i32>,
    /// Maximum allowable unit cost index.
    pub max_unit_cost_index: Option<i32>,
    /// Maximum allowable \"ribbon\" cost score.
    pub max_ribbon_cost_score: Option<i32>,
    /// Comma-separated organization IDs for location matching.
    pub location_organization_ids: Option<String>,
    /// Comma-separated organization IDs to exclude.
    pub _excl_location_organization_ids: Option<String>,
    /// Comma-separated TIN IDs to include.
    pub tin_ids: Option<String>,
    /// TIN name or partial name to include.
    pub tin_name: Option<String>,
    /// TIN's legal name to include.
    pub tin_legal_name: Option<String>
}

/// struct for passing parameters to the method [`put_custom_provider`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomProviderParams {
    /// The 10-digit National Provider Identifier (NPI) of the healthcare provider to fetch.
    pub npi: String,
    /// A JSON object mapping the name of the field to update to its new value
    pub put_custom_provider_request: models::PutCustomProviderRequest
}

/// struct for passing parameters to the method [`put_custom_provider_clinical_areas`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomProviderClinicalAreasParams {
    /// The 10-digit National Provider Identifier (NPI) of the healthcare provider to fetch.
    pub npi: String,
    /// A set of instructions for how to update the provider's clinical areas.
    pub put_custom_provider_clinical_areas_request: models::PutCustomProviderClinicalAreasRequest
}

/// struct for passing parameters to the method [`put_custom_provider_location`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomProviderLocationParams {
    /// The 10-digit National Provider Identifier (NPI) of the healthcare provider to fetch.
    pub npi: String,
    /// The UUID of the target location.
    pub location_uuid: String,
    /// A JSON object mapping the name of the field to update to its new value
    pub put_custom_provider_request: models::PutCustomProviderRequest
}

/// struct for passing parameters to the method [`put_custom_provider_location_insurances`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomProviderLocationInsurancesParams {
    /// The 10-digit National Provider Identifier (NPI) of the healthcare provider to fetch.
    pub npi: String,
    /// The UUID of the target location.
    pub location_uuid: String,
    /// A set of instructions for how to update the provider's insurances at this location.
    pub put_custom_provider_location_insurances_request: models::PutCustomProviderLocationInsurancesRequest
}

/// struct for passing parameters to the method [`put_custom_provider_location_organizations`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomProviderLocationOrganizationsParams {
    /// The 10-digit National Provider Identifier (NPI) of the healthcare provider to fetch.
    pub npi: String,
    /// The UUID of the target location.
    pub location_uuid: String,
    /// A set of instructions for how to update the provider's organizations at this location.
    pub put_custom_provider_location_organizations_request: models::PutCustomProviderLocationOrganizationsRequest
}

/// struct for passing parameters to the method [`put_custom_provider_locations`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomProviderLocationsParams {
    /// The 10-digit National Provider Identifier (NPI) of the healthcare provider to fetch.
    pub npi: String,
    /// A set of instructions for how to update the provider's locations.
    pub put_custom_provider_locations_request: models::PutCustomProviderLocationsRequest
}

/// struct for passing parameters to the method [`put_custom_provider_primary_specialties`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomProviderPrimarySpecialtiesParams {
    /// The 10-digit National Provider Identifier (NPI) of the healthcare provider to fetch.
    pub npi: String,
    /// The UUID of the target specialty.
    pub specialty_uuid: String,
    /// Whether or not this specialty is a primary specialty.
    pub put_custom_provider_primary_specialties_request: models::PutCustomProviderPrimarySpecialtiesRequest
}

/// struct for passing parameters to the method [`put_custom_provider_procedures`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomProviderProceduresParams {
    /// The 10-digit National Provider Identifier (NPI) of the healthcare provider to fetch.
    pub npi: String,
    /// A set of instructions for how to update the provider's procedures.
    pub put_custom_provider_procedures_request: models::PutCustomProviderProceduresRequest
}

/// struct for passing parameters to the method [`put_custom_provider_specialties`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomProviderSpecialtiesParams {
    /// The 10-digit National Provider Identifier (NPI) of the healthcare provider to fetch.
    pub npi: String,
    /// A set of instructions for how to update the provider's specialties.
    pub put_custom_provider_specialties_request: models::PutCustomProviderSpecialtiesRequest
}


#[async_trait]
impl ProvidersApi for ProvidersApiClient {
    /// Retrieve detailed information for any provider given their NPI, such as locations, contact information, education, patient satisfaction, etc. 
    async fn get_custom_provider(&self,  params: GetCustomProviderParams ) -> Result<ResponseContent<GetCustomProviderSuccess>, Error<GetCustomProviderError>> {
        
        let GetCustomProviderParams {
            npi,
            max_insurances,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/{npi}", local_var_configuration.base_path, npi=crate::apis::urlencode(npi));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = max_insurances {
            local_var_req_builder = local_var_req_builder.query(&[("max_insurances", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomProviderSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomProviderError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Allows you to quickly list doctors based on important search criteria.
    async fn get_custom_providers(&self,  params: GetCustomProvidersParams ) -> Result<ResponseContent<GetCustomProvidersSuccess>, Error<GetCustomProvidersError>> {
        
        let GetCustomProvidersParams {
            page,
            page_size,
            max_locations,
            fields,
            _excl_fields,
            npis,
            name,
            provider_types,
            _excl_provider_types,
            gender,
            max_age,
            min_age,
            language,
            _excl_language,
            min_rating,
            address,
            location_ids,
            _excl_location_ids,
            location,
            min_location_confidence,
            min_confidence,
            distance,
            state,
            insurance_ids,
            _excl_insurance_ids,
            insurance_carrier_name,
            location_insurance_ids,
            _excl_location_insurance_ids,
            national_bluecard,
            specialty_ids,
            _excl_specialty_ids,
            specialty,
            specialty_ids_primary,
            _excl_specialty_ids_primary,
            specialty_primary,
            apply_specialty_grouping,
            procedure_ids,
            _excl_procedure_ids,
            procedure,
            min_experience_index,
            max_cost_index,
            clinical_area,
            clinical_area_ids,
            _excl_clinical_area_ids,
            condition,
            condition_ids,
            _excl_condition_ids,
            treatment,
            treatment_ids,
            _excl_treatment_ids,
            panel_ages,
            _excl_panel_ages,
            panel_sexes,
            min_outcomes_index,
            min_efficiency_index,
            max_unit_cost_index,
            max_ribbon_cost_score,
            location_organization_ids,
            _excl_location_organization_ids,
            tin_ids,
            tin_name,
            tin_legal_name,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = max_locations {
            local_var_req_builder = local_var_req_builder.query(&[("max_locations", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = fields {
            local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_fields {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_fields", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = npis {
            local_var_req_builder = local_var_req_builder.query(&[("npis", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = name {
            local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = provider_types {
            local_var_req_builder = local_var_req_builder.query(&[("provider_types", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_provider_types {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_provider_types", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = gender {
            local_var_req_builder = local_var_req_builder.query(&[("gender", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = max_age {
            local_var_req_builder = local_var_req_builder.query(&[("max_age", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = min_age {
            local_var_req_builder = local_var_req_builder.query(&[("min_age", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = language {
            local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_language {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_language", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = min_rating {
            local_var_req_builder = local_var_req_builder.query(&[("min_rating", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = address {
            local_var_req_builder = local_var_req_builder.query(&[("address", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = location_ids {
            local_var_req_builder = local_var_req_builder.query(&[("location_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_location_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_location_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = location {
            local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = min_location_confidence {
            local_var_req_builder = local_var_req_builder.query(&[("min_location_confidence", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = min_confidence {
            local_var_req_builder = local_var_req_builder.query(&[("min_confidence", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = distance {
            local_var_req_builder = local_var_req_builder.query(&[("distance", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = state {
            local_var_req_builder = local_var_req_builder.query(&[("state", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = insurance_ids {
            local_var_req_builder = local_var_req_builder.query(&[("insurance_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_insurance_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_insurance_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = insurance_carrier_name {
            local_var_req_builder = local_var_req_builder.query(&[("insurance_carrier_name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = location_insurance_ids {
            local_var_req_builder = local_var_req_builder.query(&[("location_insurance_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_location_insurance_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_location_insurance_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = national_bluecard {
            local_var_req_builder = local_var_req_builder.query(&[("national_bluecard", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = specialty_ids {
            local_var_req_builder = local_var_req_builder.query(&[("specialty_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_specialty_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_specialty_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = specialty {
            local_var_req_builder = local_var_req_builder.query(&[("specialty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = specialty_ids_primary {
            local_var_req_builder = local_var_req_builder.query(&[("specialty_ids_primary", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_specialty_ids_primary {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_specialty_ids_primary", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = specialty_primary {
            local_var_req_builder = local_var_req_builder.query(&[("specialty_primary", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = apply_specialty_grouping {
            local_var_req_builder = local_var_req_builder.query(&[("apply_specialty_grouping", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = procedure_ids {
            local_var_req_builder = local_var_req_builder.query(&[("procedure_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_procedure_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_procedure_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = procedure {
            local_var_req_builder = local_var_req_builder.query(&[("procedure", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = min_experience_index {
            local_var_req_builder = local_var_req_builder.query(&[("min_experience_index", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = max_cost_index {
            local_var_req_builder = local_var_req_builder.query(&[("max_cost_index", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = clinical_area {
            local_var_req_builder = local_var_req_builder.query(&[("clinical_area", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = clinical_area_ids {
            local_var_req_builder = local_var_req_builder.query(&[("clinical_area_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_clinical_area_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_clinical_area_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = condition {
            local_var_req_builder = local_var_req_builder.query(&[("condition", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = condition_ids {
            local_var_req_builder = local_var_req_builder.query(&[("condition_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_condition_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_condition_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = treatment {
            local_var_req_builder = local_var_req_builder.query(&[("treatment", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = treatment_ids {
            local_var_req_builder = local_var_req_builder.query(&[("treatment_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_treatment_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_treatment_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = panel_ages {
            local_var_req_builder = local_var_req_builder.query(&[("panel_ages", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_panel_ages {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_panel_ages", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = panel_sexes {
            local_var_req_builder = local_var_req_builder.query(&[("panel_sexes", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = min_outcomes_index {
            local_var_req_builder = local_var_req_builder.query(&[("min_outcomes_index", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = min_efficiency_index {
            local_var_req_builder = local_var_req_builder.query(&[("min_efficiency_index", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = max_unit_cost_index {
            local_var_req_builder = local_var_req_builder.query(&[("max_unit_cost_index", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = max_ribbon_cost_score {
            local_var_req_builder = local_var_req_builder.query(&[("max_ribbon_cost_score", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = location_organization_ids {
            local_var_req_builder = local_var_req_builder.query(&[("location_organization_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_location_organization_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_location_organization_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = tin_ids {
            local_var_req_builder = local_var_req_builder.query(&[("tin_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = tin_name {
            local_var_req_builder = local_var_req_builder.query(&[("tin_name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = tin_legal_name {
            local_var_req_builder = local_var_req_builder.query(&[("tin_legal_name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomProvidersSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomProvidersError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit all fields that do not fall under `specialties`, `locations`, or `insurances`. You may also add new fields or remove existing fields.  #### Looking For The Old Documentation? We're in the process of revamping our documentation. You can find the old page for this endpoint [here](https://ribbon.readme.io/docs/add-or-edit-provider-fields-old). 
    async fn put_custom_provider(&self,  params: PutCustomProviderParams ) -> Result<ResponseContent<PutCustomProviderSuccess>, Error<PutCustomProviderError>> {
        
        let PutCustomProviderParams {
            npi,
            put_custom_provider_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/{npi}", local_var_configuration.base_path, npi=crate::apis::urlencode(npi));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_provider_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomProviderSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomProviderError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Add or remove clinical areas for a provider using our standard clinical area UUIDs. 
    async fn put_custom_provider_clinical_areas(&self,  params: PutCustomProviderClinicalAreasParams ) -> Result<ResponseContent<PutCustomProviderClinicalAreasSuccess>, Error<PutCustomProviderClinicalAreasError>> {
        
        let PutCustomProviderClinicalAreasParams {
            npi,
            put_custom_provider_clinical_areas_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/{npi}/clinical_areas", local_var_configuration.base_path, npi=crate::apis::urlencode(npi));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_provider_clinical_areas_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomProviderClinicalAreasSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomProviderClinicalAreasError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit all fields that do not fall under `uuid`, `google_maps_link`, `latitude`, or `longitude`. You may also add new fields or remove existing fields. These updates are provider-specific and will not affect other providers practicing at the same location. 
    async fn put_custom_provider_location(&self,  params: PutCustomProviderLocationParams ) -> Result<ResponseContent<PutCustomProviderLocationSuccess>, Error<PutCustomProviderLocationError>> {
        
        let PutCustomProviderLocationParams {
            npi,
            location_uuid,
            put_custom_provider_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/{npi}/locations/{location_uuid}", local_var_configuration.base_path, npi=crate::apis::urlencode(npi), location_uuid=crate::apis::urlencode(location_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_provider_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomProviderLocationSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomProviderLocationError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Add or remove insurances accepted by a provider at a specific location using our standard insurance UUIDs. 
    async fn put_custom_provider_location_insurances(&self,  params: PutCustomProviderLocationInsurancesParams ) -> Result<ResponseContent<PutCustomProviderLocationInsurancesSuccess>, Error<PutCustomProviderLocationInsurancesError>> {
        
        let PutCustomProviderLocationInsurancesParams {
            npi,
            location_uuid,
            put_custom_provider_location_insurances_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/{npi}/locations/{location_uuid}/insurances", local_var_configuration.base_path, npi=crate::apis::urlencode(npi), location_uuid=crate::apis::urlencode(location_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_provider_location_insurances_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomProviderLocationInsurancesSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomProviderLocationInsurancesError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Add or remove organizations accepted by a provider at a specific location using our standard organization UUIDs. 
    async fn put_custom_provider_location_organizations(&self,  params: PutCustomProviderLocationOrganizationsParams ) -> Result<ResponseContent<PutCustomProviderLocationOrganizationsSuccess>, Error<PutCustomProviderLocationOrganizationsError>> {
        
        let PutCustomProviderLocationOrganizationsParams {
            npi,
            location_uuid,
            put_custom_provider_location_organizations_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/{npi}/locations/{location_uuid}/organizations", local_var_configuration.base_path, npi=crate::apis::urlencode(npi), location_uuid=crate::apis::urlencode(location_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_provider_location_organizations_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomProviderLocationOrganizationsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomProviderLocationOrganizationsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Add or remove locations a provider practices at using our standard location UUIDs. 
    async fn put_custom_provider_locations(&self,  params: PutCustomProviderLocationsParams ) -> Result<ResponseContent<PutCustomProviderLocationsSuccess>, Error<PutCustomProviderLocationsError>> {
        
        let PutCustomProviderLocationsParams {
            npi,
            put_custom_provider_locations_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/{npi}/locations", local_var_configuration.base_path, npi=crate::apis::urlencode(npi));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_provider_locations_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomProviderLocationsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomProviderLocationsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit whether a single specialty is one of the provider's primary specialties. 
    async fn put_custom_provider_primary_specialties(&self,  params: PutCustomProviderPrimarySpecialtiesParams ) -> Result<ResponseContent<PutCustomProviderPrimarySpecialtiesSuccess>, Error<PutCustomProviderPrimarySpecialtiesError>> {
        
        let PutCustomProviderPrimarySpecialtiesParams {
            npi,
            specialty_uuid,
            put_custom_provider_primary_specialties_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/{npi}/specialties/{specialty_uuid}", local_var_configuration.base_path, npi=crate::apis::urlencode(npi), specialty_uuid=crate::apis::urlencode(specialty_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_provider_primary_specialties_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomProviderPrimarySpecialtiesSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomProviderPrimarySpecialtiesError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Add or remove procedures for a provider using our standard procedure UUIDs. 
    async fn put_custom_provider_procedures(&self,  params: PutCustomProviderProceduresParams ) -> Result<ResponseContent<PutCustomProviderProceduresSuccess>, Error<PutCustomProviderProceduresError>> {
        
        let PutCustomProviderProceduresParams {
            npi,
            put_custom_provider_procedures_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/{npi}/procedures", local_var_configuration.base_path, npi=crate::apis::urlencode(npi));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_provider_procedures_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomProviderProceduresSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomProviderProceduresError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Add or remove specialties for a provider using our standard specialty UUIDs. 
    async fn put_custom_provider_specialties(&self,  params: PutCustomProviderSpecialtiesParams ) -> Result<ResponseContent<PutCustomProviderSpecialtiesSuccess>, Error<PutCustomProviderSpecialtiesError>> {
        
        let PutCustomProviderSpecialtiesParams {
            npi,
            put_custom_provider_specialties_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/providers/{npi}/specialties", local_var_configuration.base_path, npi=crate::apis::urlencode(npi));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_provider_specialties_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomProviderSpecialtiesSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomProviderSpecialtiesError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed successes of method [`get_custom_provider`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomProviderSuccess {
    Status200(models::GetCustomProvider200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_providers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomProvidersSuccess {
    Status200(models::GetCustomProviders200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_provider`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderSuccess {
    Status200(models::PutCustomProvider200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_provider_clinical_areas`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderClinicalAreasSuccess {
    Status200(models::PutCustomProviderLocations200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_provider_location`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderLocationSuccess {
    Status200(models::PutCustomProvider200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_provider_location_insurances`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderLocationInsurancesSuccess {
    Status200(models::PutCustomProviderLocations200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_provider_location_organizations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderLocationOrganizationsSuccess {
    Status200(models::PutCustomProviderLocations200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_provider_locations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderLocationsSuccess {
    Status200(models::PutCustomProviderLocations200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_provider_primary_specialties`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderPrimarySpecialtiesSuccess {
    Status200(models::PutCustomProviderPrimarySpecialties200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_provider_procedures`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderProceduresSuccess {
    Status200(models::PutCustomProviderLocations200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_provider_specialties`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderSpecialtiesSuccess {
    Status200(models::PutCustomProviderSpecialties200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_provider`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomProviderError {
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_providers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomProvidersError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_provider`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_provider_clinical_areas`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderClinicalAreasError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_provider_location`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderLocationError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_provider_location_insurances`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderLocationInsurancesError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_provider_location_organizations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderLocationOrganizationsError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_provider_locations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderLocationsError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_provider_primary_specialties`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderPrimarySpecialtiesError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_provider_procedures`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderProceduresError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_provider_specialties`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomProviderSpecialtiesError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

