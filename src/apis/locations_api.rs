/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;

#[async_trait]
pub trait LocationsApi: Send + Sync {

    /// DELETE /custom/locations/{location_uuid}
    ///
    /// Delete a location. 
    async fn delete_custom_location(&self,  params: DeleteCustomLocationParams ) -> Result<ResponseContent<DeleteCustomLocationSuccess>, Error<DeleteCustomLocationError>>;

    /// GET /custom/locations/{location_uuid}
    ///
    /// Retrieve data on a specific location. 
    async fn get_custom_location(&self,  params: GetCustomLocationParams ) -> Result<ResponseContent<GetCustomLocationSuccess>, Error<GetCustomLocationError>>;

    /// GET /custom/locations
    ///
    /// Allows you to search for different service locations, including specific location types. 
    async fn get_custom_locations(&self,  params: GetCustomLocationsParams ) -> Result<ResponseContent<GetCustomLocationsSuccess>, Error<GetCustomLocationsError>>;

    /// POST /custom/locations
    ///
    /// Create new locations and facilities.  #### Example Use Case You want to add new urgent care locations (or labs, imaging centers, therapy centers, etc.) to an area that are not yet included in the existing Ribbon locations listings. 
    async fn post_custom_locations(&self,  params: PostCustomLocationsParams ) -> Result<ResponseContent<PostCustomLocationsSuccess>, Error<PostCustomLocationsError>>;

    /// PUT /custom/locations/{location_uuid}
    ///
    /// Edit all fields that do not fall under `insurances`, `google_maps_link`, `latitude`, or `longitude`. You may also add new fields or remove existing fields. 
    async fn put_custom_location(&self,  params: PutCustomLocationParams ) -> Result<ResponseContent<PutCustomLocationSuccess>, Error<PutCustomLocationError>>;

    /// PUT /custom/locations/{location_uuid}/clinical_areas
    ///
    /// Add or remove clinical areas from a location using our standard clinical area UUIDs. 
    async fn put_custom_location_clinical_areas(&self,  params: PutCustomLocationClinicalAreasParams ) -> Result<ResponseContent<PutCustomLocationClinicalAreasSuccess>, Error<PutCustomLocationClinicalAreasError>>;

    /// PUT /custom/locations/{location_uuid}/insurances
    ///
    /// Add or remove insurances from a location using our standard insurance UUIDs. 
    async fn put_custom_location_insurances(&self,  params: PutCustomLocationInsurancesParams ) -> Result<ResponseContent<PutCustomLocationInsurancesSuccess>, Error<PutCustomLocationInsurancesError>>;

    /// PUT /custom/locations/{location_uuid}/organizations
    ///
    /// Add or remove organizations from a location using our standard organization UUIDs. 
    async fn put_custom_location_organizations(&self,  params: PutCustomLocationOrganizationsParams ) -> Result<ResponseContent<PutCustomLocationOrganizationsSuccess>, Error<PutCustomLocationOrganizationsError>>;
}

pub struct LocationsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl LocationsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`delete_custom_location`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteCustomLocationParams {
    /// The UUID of the target location.
    pub location_uuid: String
}

/// struct for passing parameters to the method [`get_custom_location`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomLocationParams {
    /// The UUID of the target location.
    pub location_uuid: String
}

/// struct for passing parameters to the method [`get_custom_locations`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCustomLocationsParams {
    /// The page of the results which was returned.
    pub page: Option<i32>,
    /// How many results are in each page.
    pub page_size: Option<i32>,
    /// Comma separated list of fields within the location object to return. Can be used to greatly reduce the size of the response by requesting only data you intend to use. Cannot be used in tandem with `_excl_fields`
    pub fields: Option<String>,
    /// Comma separated list of fields within the location object to exclude from the response. Can be used to greatly reduce the size of the response by requesting only data you intend to use.
    pub _excl_fields: Option<String>,
    /// String input of an address that will be interpreted and geocoded in real time.
    pub address: Option<String>,
    /// String input for a 'fuzzy' search on location name.
    pub name: Option<String>,
    /// The proximity radius of locations returned.
    pub distance: Option<i32>,
    /// Comma separated list of values that filter to what type of facilities to show. We categorize locations into 36 types. Clients can add their own locations with unique location_types, and they will also be included in the search. See the Location Types Reference Endpoint for a list of all location types.
    pub location_types: Option<String>,
    /// Comma separated list of the 'types' of locations to exclude. Excludes locations with a matching location type.
    pub _excl_location_types: Option<String>,
    /// Latitude/longitude pair of coordinates in lieu of a string address.
    pub location: Option<String>,
    /// Comma separated list of desired practice location uuids.
    pub location_ids: Option<String>,
    /// Comma separated list of practice location uuids to exclude.
    pub _excl_location_ids: Option<String>,
    /// Comma separated list of desired insurance uuids. See all locations that accept a given insurance(s).
    pub insurance_ids: Option<String>,
    /// Comma separated list of insurance uuids to exclude. Exclude locations that accept a given insurance(s).
    pub _excl_insurance_ids: Option<String>,
    /// String input of carrier_name in order to search for all locations that take at least one plan from a given insurance carrier. Find the individual valid carrier_name values from the insurance objects returned in the Insurances Reference Endpoint. Note: This input must be an exact string match to work
    pub insurance_carrier_name: Option<String>,
    /// Integer input (0-5) of the minimum confidence threshold for returned locations. min_location_confidence=4 will only display locations that have a confidence 4 or higher.
    pub min_confidence: Option<i32>,
    /// Boolean input that enables an API search to automatically default to the National BlueCard EPO/PPO Network whenever a member searches for out-of-state, in-network care and is covered by a BCBS Association PPO insurance plan. Use the parameter in conjunction with the address parameter and either the insurance_ids or insurance fuzzy search parameters. Defaults to true unless otherwise specified.
    pub national_bluecard: Option<bool>,
    /// Comma separated list of desired organization uuids. Filters to only locations that are affiliated with the given organization uuid(s).
    pub organization_ids: Option<String>,
    /// Comma separated list of organization uuids to exclude. Excludes locations that are affiliated with the given organization uuid(s).
    pub _excl_organization_ids: Option<String>,
    /// String input that is fuzzy matched to the most relevant `clinical_area.display` field. Only a single clinical area will be selected. Returns all location with this clinical area.
    pub clinical_area: Option<String>,
    /// Comma-separated list of desired clinical area ids. Returns all locations with a clinical area exactly matching any of the entered IDs. (Note: Use the `/clinical_areas/` reference endpoint to identify relevant IDs)
    pub clinical_area_ids: Option<String>,
    /// Comma-separated list of clinical area ids to exclude. Returns all locations without a clinical area exactly matching any of the entered IDs. (Note: Use the `/clinical_areas/` reference endpoint to identify relevant IDs)
    pub _excl_clinical_area_ids: Option<String>,
    /// String input that is fuzzy matched to the most relevant `treatments.display` field. Only a single treatment will be selected. Returns all locations with this treatment.
    pub treatment: Option<String>,
    /// Comma-separated list of desired treatment ids. Returns all locations with a `treatments.uuid` field exactly matching any of the entered IDs. (Note: Use the /treatments/ reference endpoint (docs) to identify relevant IDs)
    pub treatment_ids: Option<String>,
    /// Comma-separated list of treatment ids to exclude. Returns all locations without a `treatments.uuid` field exactly matching any of the entered IDs. (Note: Use the /treatments/ reference endpoint (docs) to identify relevant IDs)
    pub _excl_treatment_ids: Option<String>,
    /// Comma separated list of desired TINs. Filters to only locations that are affiliated with the given TINs. Note: This parameter cannot be used in combination with any other TINs related parameters. All other TINs related parameters will be ignored.
    pub tin_ids: Option<String>,
    /// String input that is fuzzy matched against the `tins.name` field. Filters to only locations that are affiliated with the given TINs name.
    pub tin_name: Option<String>,
    /// String input that is fuzzy matched against the `tins.legal_name` field. Filters to only locations that are affiliated with the given TINs legal name.
    pub tin_legal_name: Option<String>
}

/// struct for passing parameters to the method [`post_custom_locations`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PostCustomLocationsParams {
    /// A JSON object describing the location you want to create.
    pub post_custom_locations_request: models::PostCustomLocationsRequest
}

/// struct for passing parameters to the method [`put_custom_location`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomLocationParams {
    /// The UUID of the target location.
    pub location_uuid: String,
    /// A JSON object mapping the name of the field to update to its new value
    pub put_custom_location_request: models::PutCustomLocationRequest
}

/// struct for passing parameters to the method [`put_custom_location_clinical_areas`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomLocationClinicalAreasParams {
    /// The UUID of the target location.
    pub location_uuid: String,
    /// A set of instructions for how to update the location's clinical areas.
    pub put_custom_location_clinical_areas_request: models::PutCustomLocationClinicalAreasRequest
}

/// struct for passing parameters to the method [`put_custom_location_insurances`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomLocationInsurancesParams {
    /// The UUID of the target location.
    pub location_uuid: String,
    /// A set of instructions for how to update the location's insurances.
    pub put_custom_location_insurances_request: models::PutCustomLocationInsurancesRequest
}

/// struct for passing parameters to the method [`put_custom_location_organizations`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PutCustomLocationOrganizationsParams {
    /// The UUID of the target location.
    pub location_uuid: String,
    /// A set of instructions for how to update the location's organizations.
    pub put_custom_location_organizations_request: models::PutCustomLocationOrganizationsRequest
}


#[async_trait]
impl LocationsApi for LocationsApiClient {
    /// Delete a location. 
    async fn delete_custom_location(&self,  params: DeleteCustomLocationParams ) -> Result<ResponseContent<DeleteCustomLocationSuccess>, Error<DeleteCustomLocationError>> {
        
        let DeleteCustomLocationParams {
            location_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations/{location_uuid}", local_var_configuration.base_path, location_uuid=crate::apis::urlencode(location_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<DeleteCustomLocationSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<DeleteCustomLocationError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Retrieve data on a specific location. 
    async fn get_custom_location(&self,  params: GetCustomLocationParams ) -> Result<ResponseContent<GetCustomLocationSuccess>, Error<GetCustomLocationError>> {
        
        let GetCustomLocationParams {
            location_uuid,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations/{location_uuid}", local_var_configuration.base_path, location_uuid=crate::apis::urlencode(location_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomLocationSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomLocationError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Allows you to search for different service locations, including specific location types. 
    async fn get_custom_locations(&self,  params: GetCustomLocationsParams ) -> Result<ResponseContent<GetCustomLocationsSuccess>, Error<GetCustomLocationsError>> {
        
        let GetCustomLocationsParams {
            page,
            page_size,
            fields,
            _excl_fields,
            address,
            name,
            distance,
            location_types,
            _excl_location_types,
            location,
            location_ids,
            _excl_location_ids,
            insurance_ids,
            _excl_insurance_ids,
            insurance_carrier_name,
            min_confidence,
            national_bluecard,
            organization_ids,
            _excl_organization_ids,
            clinical_area,
            clinical_area_ids,
            _excl_clinical_area_ids,
            treatment,
            treatment_ids,
            _excl_treatment_ids,
            tin_ids,
            tin_name,
            tin_legal_name,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = fields {
            local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_fields {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_fields", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = address {
            local_var_req_builder = local_var_req_builder.query(&[("address", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = name {
            local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = distance {
            local_var_req_builder = local_var_req_builder.query(&[("distance", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = location_types {
            local_var_req_builder = local_var_req_builder.query(&[("location_types", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_location_types {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_location_types", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = location {
            local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = location_ids {
            local_var_req_builder = local_var_req_builder.query(&[("location_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_location_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_location_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = insurance_ids {
            local_var_req_builder = local_var_req_builder.query(&[("insurance_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_insurance_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_insurance_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = insurance_carrier_name {
            local_var_req_builder = local_var_req_builder.query(&[("insurance_carrier_name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = min_confidence {
            local_var_req_builder = local_var_req_builder.query(&[("min_confidence", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = national_bluecard {
            local_var_req_builder = local_var_req_builder.query(&[("national_bluecard", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = organization_ids {
            local_var_req_builder = local_var_req_builder.query(&[("organization_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_organization_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_organization_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = clinical_area {
            local_var_req_builder = local_var_req_builder.query(&[("clinical_area", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = clinical_area_ids {
            local_var_req_builder = local_var_req_builder.query(&[("clinical_area_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_clinical_area_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_clinical_area_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = treatment {
            local_var_req_builder = local_var_req_builder.query(&[("treatment", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = treatment_ids {
            local_var_req_builder = local_var_req_builder.query(&[("treatment_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = _excl_treatment_ids {
            local_var_req_builder = local_var_req_builder.query(&[("_excl_treatment_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = tin_ids {
            local_var_req_builder = local_var_req_builder.query(&[("tin_ids", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = tin_name {
            local_var_req_builder = local_var_req_builder.query(&[("tin_name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = tin_legal_name {
            local_var_req_builder = local_var_req_builder.query(&[("tin_legal_name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetCustomLocationsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetCustomLocationsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Create new locations and facilities.  #### Example Use Case You want to add new urgent care locations (or labs, imaging centers, therapy centers, etc.) to an area that are not yet included in the existing Ribbon locations listings. 
    async fn post_custom_locations(&self,  params: PostCustomLocationsParams ) -> Result<ResponseContent<PostCustomLocationsSuccess>, Error<PostCustomLocationsError>> {
        
        let PostCustomLocationsParams {
            post_custom_locations_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&post_custom_locations_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PostCustomLocationsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PostCustomLocationsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit all fields that do not fall under `insurances`, `google_maps_link`, `latitude`, or `longitude`. You may also add new fields or remove existing fields. 
    async fn put_custom_location(&self,  params: PutCustomLocationParams ) -> Result<ResponseContent<PutCustomLocationSuccess>, Error<PutCustomLocationError>> {
        
        let PutCustomLocationParams {
            location_uuid,
            put_custom_location_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations/{location_uuid}", local_var_configuration.base_path, location_uuid=crate::apis::urlencode(location_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_location_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomLocationSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomLocationError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Add or remove clinical areas from a location using our standard clinical area UUIDs. 
    async fn put_custom_location_clinical_areas(&self,  params: PutCustomLocationClinicalAreasParams ) -> Result<ResponseContent<PutCustomLocationClinicalAreasSuccess>, Error<PutCustomLocationClinicalAreasError>> {
        
        let PutCustomLocationClinicalAreasParams {
            location_uuid,
            put_custom_location_clinical_areas_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations/{location_uuid}/clinical_areas", local_var_configuration.base_path, location_uuid=crate::apis::urlencode(location_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_location_clinical_areas_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomLocationClinicalAreasSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomLocationClinicalAreasError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Add or remove insurances from a location using our standard insurance UUIDs. 
    async fn put_custom_location_insurances(&self,  params: PutCustomLocationInsurancesParams ) -> Result<ResponseContent<PutCustomLocationInsurancesSuccess>, Error<PutCustomLocationInsurancesError>> {
        
        let PutCustomLocationInsurancesParams {
            location_uuid,
            put_custom_location_insurances_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations/{location_uuid}/insurances", local_var_configuration.base_path, location_uuid=crate::apis::urlencode(location_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_location_insurances_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomLocationInsurancesSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomLocationInsurancesError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Add or remove organizations from a location using our standard organization UUIDs. 
    async fn put_custom_location_organizations(&self,  params: PutCustomLocationOrganizationsParams ) -> Result<ResponseContent<PutCustomLocationOrganizationsSuccess>, Error<PutCustomLocationOrganizationsError>> {
        
        let PutCustomLocationOrganizationsParams {
            location_uuid,
            put_custom_location_organizations_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/custom/locations/{location_uuid}/organizations", local_var_configuration.base_path, location_uuid=crate::apis::urlencode(location_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&put_custom_location_organizations_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<PutCustomLocationOrganizationsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<PutCustomLocationOrganizationsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed successes of method [`delete_custom_location`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomLocationSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_location`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomLocationSuccess {
    Status200(models::GetCustomProvider200ResponseLocationsInner),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_custom_locations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomLocationsSuccess {
    Status200(models::GetCustomLocations200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`post_custom_locations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCustomLocationsSuccess {
    Status201(models::PostCustomLocations201Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_location`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomLocationSuccess {
    Status200(models::PutCustomLocation200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_location_clinical_areas`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomLocationClinicalAreasSuccess {
    Status200(models::PutCustomLocationInsurances200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_location_insurances`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomLocationInsurancesSuccess {
    Status200(models::PutCustomLocationInsurances200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`put_custom_location_organizations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomLocationOrganizationsSuccess {
    Status200(models::PutCustomLocationInsurances200Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_custom_location`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomLocationError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_location`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomLocationError {
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_custom_locations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomLocationsError {
    Status400(models::GetCustomProviders400Response),
    Status403(models::GetCustomProviders403Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_custom_locations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCustomLocationsError {
    Status400(models::GetCustomProviders400Response),
    Status409(models::EditCustomProviderFilter409Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_location`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomLocationError {
    Status400(models::GetCustomProviders400Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_location_clinical_areas`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomLocationClinicalAreasError {
    Status400(models::GetCustomProviders400Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_location_insurances`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomLocationInsurancesError {
    Status400(models::GetCustomProviders400Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_custom_location_organizations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutCustomLocationOrganizationsError {
    Status400(models::GetCustomProviders400Response),
    Status404(models::GetCustomProvider404Response),
    UnknownValue(serde_json::Value),
}

