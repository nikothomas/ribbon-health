/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCustomProviders200ResponseParametersExclusions {
    /// List of 'types' of providers excluded. Excludes any providers with a matching provider type.
    #[serde(rename = "provider_types", skip_serializing_if = "Option::is_none")]
    pub provider_types: Option<Vec<String>>,
    /// List of insurance uuids excluded. Excludes any providers who accept a given insurance(s).
    #[serde(rename = "insurance_ids", skip_serializing_if = "Option::is_none")]
    pub insurance_ids: Option<Vec<uuid::Uuid>>,
    /// List of insurance uuids excluded. Excludes any provider locations that accept a given insurance(s).
    #[serde(rename = "location_insurance_ids", skip_serializing_if = "Option::is_none")]
    pub location_insurance_ids: Option<Vec<uuid::Uuid>>,
    /// List of practice location uuids to exclude. Excludes providers who see patients at any of the given practice locations.
    #[serde(rename = "location_ids", skip_serializing_if = "Option::is_none")]
    pub location_ids: Option<Vec<uuid::Uuid>>,
    /// List of organization uuids to exclude. Excludes providers who have the given organization uuid(s) listed in the `provider.organizations` field.
    #[serde(rename = "location_organization_ids", skip_serializing_if = "Option::is_none")]
    pub location_organization_ids: Option<Vec<uuid::Uuid>>,
    /// A list of specialty IDs excluded from the search. This can be the result of using `_excl_specialty_ids` or exclusions based on the fuzzy-matched `specialty` parameter.
    #[serde(rename = "specialty_ids", skip_serializing_if = "Option::is_none")]
    pub specialty_ids: Option<Vec<uuid::Uuid>>,
    /// A list of primary specialty IDs excluded from the search. This can be the result of using `_excl_specialty_ids_primary` or exclusions based on the fuzzy-matched `specialty_primary` parameter.
    #[serde(rename = "specialty_ids_primary", skip_serializing_if = "Option::is_none")]
    pub specialty_ids_primary: Option<Vec<uuid::Uuid>>,
    /// Comma separated list of procedure uuids to exclude. Exclude providers who perform the given procedure.
    #[serde(rename = "procedure_ids", skip_serializing_if = "Option::is_none")]
    pub procedure_ids: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<models::GetCustomProviders200ResponseParametersExclusionsLanguage>,
}

impl GetCustomProviders200ResponseParametersExclusions {
    pub fn new() -> GetCustomProviders200ResponseParametersExclusions {
        GetCustomProviders200ResponseParametersExclusions {
            provider_types: None,
            insurance_ids: None,
            location_insurance_ids: None,
            location_ids: None,
            location_organization_ids: None,
            specialty_ids: None,
            specialty_ids_primary: None,
            procedure_ids: None,
            language: None,
        }
    }
}

