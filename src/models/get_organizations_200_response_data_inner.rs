/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetOrganizations200ResponseDataInner {
    /// A UUID uniquely identifying this organization
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<uuid::Uuid>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The types of this organization. We currently only support `Health System` organizations, but plan to expand this in the future
    #[serde(rename = "organization_types", skip_serializing_if = "Option::is_none")]
    pub organization_types: Option<Vec<OrganizationTypes>>,
    /// Website(s) of this organization
    #[serde(rename = "websites", skip_serializing_if = "Option::is_none")]
    pub websites: Option<Vec<models::GetOrganizations200ResponseDataInnerWebsitesInner>>,
    /// 
    #[serde(rename = "ids", skip_serializing_if = "Option::is_none")]
    pub ids: Option<Vec<models::GetOrganizations200ResponseDataInnerIdsInner>>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(rename = "address_details", skip_serializing_if = "Option::is_none")]
    pub address_details: Option<models::GetOrganizations200ResponseDataInnerAddressDetails>,
    #[serde(rename = "latitude", skip_serializing_if = "Option::is_none")]
    pub latitude: Option<f64>,
    #[serde(rename = "longitude", skip_serializing_if = "Option::is_none")]
    pub longitude: Option<f64>,
    /// 
    #[serde(rename = "phone_numbers", skip_serializing_if = "Option::is_none")]
    pub phone_numbers: Option<Vec<models::GetOrganizations200ResponseDataInnerPhoneNumbersInner>>,
}

impl GetOrganizations200ResponseDataInner {
    pub fn new() -> GetOrganizations200ResponseDataInner {
        GetOrganizations200ResponseDataInner {
            uuid: None,
            name: None,
            organization_types: None,
            websites: None,
            ids: None,
            address: None,
            address_details: None,
            latitude: None,
            longitude: None,
            phone_numbers: None,
        }
    }
}
/// The types of this organization. We currently only support `Health System` organizations, but plan to expand this in the future
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrganizationTypes {
    #[serde(rename = "Health System")]
    HealthSystem,
}

impl Default for OrganizationTypes {
    fn default() -> OrganizationTypes {
        Self::HealthSystem
    }
}

