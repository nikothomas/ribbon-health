/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCustomProviders200ResponseParameters {
    /// The total number of results matched, across all pages.
    #[serde(rename = "total_count", skip_serializing_if = "Option::is_none")]
    pub total_count: Option<i32>,
    /// The main criteria used to sort results in the record set.
    #[serde(rename = "sort_by", skip_serializing_if = "Option::is_none")]
    pub sort_by: Option<String>,
    #[serde(rename = "geo", skip_serializing_if = "Option::is_none")]
    pub geo: Option<models::GetCustomProviders200ResponseParametersGeo>,
    /// The page of the results which was returned.
    #[serde(rename = "page", skip_serializing_if = "Option::is_none")]
    pub page: Option<i32>,
    /// How many results are in each page.
    #[serde(rename = "page_size", skip_serializing_if = "Option::is_none")]
    pub page_size: Option<i32>,
    /// The maximum number of locations attached to any given provider. Defaults to 5 (not shown if unspecified).
    #[serde(rename = "max_locations", skip_serializing_if = "Option::is_none")]
    pub max_locations: Option<i32>,
    /// List of fields within the provider object to return. Can be used to greatly reduce the size of the response by requesting only data you intend to use.  Cannot be used in tandem with `_excl_fields`
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<String>>,
    /// List of fields within the provider object to exclude from the response. Can be used to greatly reduce the size of the response by requesting only data you intend to use.
    #[serde(rename = "_excl_fields", skip_serializing_if = "Option::is_none")]
    pub _excl_fields: Option<Vec<String>>,
    /// List of desired NPIs (i.e. use this to search for 5 specific doctors).  Note: This parameter cannot be used in combination with any other parameters. All other parameters will be ignored.
    #[serde(rename = "npis", skip_serializing_if = "Option::is_none")]
    pub npis: Option<Vec<String>>,
    /// String input of a full, first, last, or partial name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The 'types' of providers you searched for. Provider types are higher level groupings of specialties. Here are a few key provider types: - Doctor - Nursing - Dental Providers - Optometry - Chiropractic Providers  See the Specialties Reference Endpoint for a list of all specialties and their provider types.
    #[serde(rename = "provider_types", skip_serializing_if = "Option::is_none")]
    pub provider_types: Option<Vec<String>>,
    /// String input of either m or f to filter to only medical providers of the inputted gender.
    #[serde(rename = "gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<Gender>,
    /// Integer input (i.e. 50) to filter to only medical providers under the inputted age.
    #[serde(rename = "max_age", skip_serializing_if = "Option::is_none")]
    pub max_age: Option<i32>,
    /// Integer input (i.e. 50) to filter to only medical providers above the inputted age.
    #[serde(rename = "min_age", skip_serializing_if = "Option::is_none")]
    pub min_age: Option<i32>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<models::GetCustomProviders200ResponseParametersLanguage>,
    /// Integer input (from 0 to 10) to filter to only providers above the inputted value for the ratings_avg field.
    #[serde(rename = "min_rating", skip_serializing_if = "Option::is_none")]
    pub min_rating: Option<u32>,
    /// String input of an address that will be interpreted and geocoded in real time.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// List of desired practice location uuids. See all providers who see patients at any of the given practice locations.
    #[serde(rename = "location_ids", skip_serializing_if = "Option::is_none")]
    pub location_ids: Option<Vec<uuid::Uuid>>,
    /// Integer input (0-5) of the minimum confidence threshold for returned provider locations. min_location_confidence=3 will only display providers' locations that have a confidence 3 or higher. If a provider has a 5 locations, one of which is greater than 3, only the high confidence location will be included in the returned JSON output.  Note: when this parameter is in use, the maximum number of records accessible is 1000 (i.e. if you maintain the default page_size of 25, the last page that can be paginated to is 40)
    #[serde(rename = "min_location_confidence", skip_serializing_if = "Option::is_none")]
    pub min_location_confidence: Option<u32>,
    /// Integer input (0-5) of the minimum confidence location you wish the returned providers to have (i.e. min_confidence=4 will only display providers who have a location with confidence 4 or higher). This is a more performant but 'simpler' version of `min_location_confidence` parameter.
    #[serde(rename = "min_confidence", skip_serializing_if = "Option::is_none")]
    pub min_confidence: Option<u32>,
    /// The proximity radius of providers returned.   Note: When using `min_location_confidence` and `location_insurance_ids` parameters, limit `distance` to be less than 50 miles to ensure high quality results.
    #[serde(rename = "distance", skip_serializing_if = "Option::is_none")]
    pub distance: Option<f64>,
    /// Two-letter state abbreviation of provider locations to filter to. Note that this parameter will override `address` and `location` parameters if used together.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// List of desired insurance uuids. See all providers who accept a given insurance(s).
    #[serde(rename = "insurance_ids", skip_serializing_if = "Option::is_none")]
    pub insurance_ids: Option<Vec<uuid::Uuid>>,
    /// String input of carrier_name in order to search for all providers that take at least one plan from a given insurance carrier.  Find the individual valid carrier_name values from the insurance objects returned in the Insurances Reference Endpoint.  Note: This input must be an exact string match to work
    #[serde(rename = "insurance_carrier_name", skip_serializing_if = "Option::is_none")]
    pub insurance_carrier_name: Option<String>,
    /// List of desired insurance uuids. See all provider locations that accept a given insurance(s).  Note, this parameter cannot be combined with `insurance_ids` to filter on provider insurances and provider location insurances.
    #[serde(rename = "location_insurance_ids", skip_serializing_if = "Option::is_none")]
    pub location_insurance_ids: Option<Vec<uuid::Uuid>>,
    /// Boolean input that enables an API search to automatically default to the National BlueCard EPO/PPO Network whenever a member searches for out-of-state, in-network care and is covered by a BCBS Association PPO insurance plan. Use the parameter in conjunction with the address parameter and either the insurance_ids or insurance fuzzy search parameters. Defaults to true unless otherwise specified.
    #[serde(rename = "national_bluecard", skip_serializing_if = "Option::is_none")]
    pub national_bluecard: Option<bool>,
    /// List of desired specialty uuids. See all providers who specialize in the given specialties.  Cannot be used in tandem with `specialty_ids_primary` or `specialty_primary`.
    #[serde(rename = "specialty_ids", skip_serializing_if = "Option::is_none")]
    pub specialty_ids: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "specialty", skip_serializing_if = "Option::is_none")]
    pub specialty: Option<models::GetCustomProviders200ResponseParametersSpecialty>,
    /// List of specialty uuids. See all providers whose primary specialties are in the given specialties.  Cannot be used in tandem with `specialty_ids` or `specialty`.
    #[serde(rename = "specialty_ids_primary", skip_serializing_if = "Option::is_none")]
    pub specialty_ids_primary: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "primary_specialty", skip_serializing_if = "Option::is_none")]
    pub primary_specialty: Option<models::GetCustomProviders200ResponseParametersSpecialty>,
    /// Boolean input that enables an API search to automatically default to apply the inclusions and exclusions logic for grouping relevant specialties when using the `specialty` or `specialty_primary` parameter. Defaults to `true`. For details, please read [our guide on searching by specialties](https://ribbon.readme.io/docs/search-for-specialties).
    #[serde(rename = "apply_specialty_grouping", skip_serializing_if = "Option::is_none")]
    pub apply_specialty_grouping: Option<bool>,
    /// Comma separated list of desired procedure uuids. Filter to only providers who perform the given procedure.
    #[serde(rename = "procedure_ids", skip_serializing_if = "Option::is_none")]
    pub procedure_ids: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "procedure", skip_serializing_if = "Option::is_none")]
    pub procedure: Option<models::GetCustomProviders200ResponseParametersProcedure>,
    /// Float input of the minimum experience index for procedures. min_experience_index=4 will only return providers that have an experience index of 4 or higher for at least one of the given procedure uuids.  Note: This parameter must be used with `procedure_ids`.
    #[serde(rename = "min_experience_index", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub min_experience_index: Option<Option<serde_json::Value>>,
    /// Float input of the maximum cost index for procedures. max_cost_index=4 will only return providers that have a cost index of 4 or less for at least one of the given procedure uuids.  Note: This parameter must be used with `procedure_ids`.
    #[serde(rename = "max_cost_index", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_cost_index: Option<Option<serde_json::Value>>,
    /// String input that is fuzzy matched to the most relevant `clinical_area.display` field. Only a single clinical area will be selected.  Returns all providers with this clinical area.
    #[serde(rename = "clinical_area", skip_serializing_if = "Option::is_none")]
    pub clinical_area: Option<String>,
    #[serde(rename = "clinical_area_ids", skip_serializing_if = "Option::is_none")]
    pub clinical_area_ids: Option<models::GetCustomProviders200ResponseParametersClinicalAreaIds>,
    #[serde(rename = "condition", skip_serializing_if = "Option::is_none")]
    pub condition: Option<models::GetCustomProviders200ResponseParametersClinicalAreaIdsConditionsInner>,
    /// List of desired condition ids. Returns all providers with a `conditions.uuid` field exactly matching any of the entered IDs.  (Note: Use the `/conditions/` reference endpoint  to identify relevant IDs)
    #[serde(rename = "condition_ids", skip_serializing_if = "Option::is_none")]
    pub condition_ids: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "treatment", skip_serializing_if = "Option::is_none")]
    pub treatment: Option<models::GetCustomProviders200ResponseParametersClinicalAreaIdsTreatmentsInner>,
    /// List of desired treatment ids. Returns all providers with a `treatments.uuid` field exactly matching any of the entered IDs.  (Note: Use the /treatments/ reference endpoint (docs) to identify relevant IDs)
    #[serde(rename = "treatment_ids", skip_serializing_if = "Option::is_none")]
    pub treatment_ids: Option<Vec<uuid::Uuid>>,
    /// List of desired panel ages strings.
    #[serde(rename = "panel_ages", skip_serializing_if = "Option::is_none")]
    pub panel_ages: Option<Vec<PanelAges>>,
    /// Desired Panel Sexes string. Options are:    `Both female and male`   `Primarily female`   `Primarily male`  Returns all providers with a panel sexes label field exactly matching the entered string.
    #[serde(rename = "panel_sexes", skip_serializing_if = "Option::is_none")]
    pub panel_sexes: Option<PanelSexes>,
    /// Accepts a single integer input between 1 and 5.  Returns providers with an aggregate Outcomes Quality score (field: `performance.aggregate.quality.outcomes_index`) greater than or equal to the entered parameter.
    #[serde(rename = "min_outcomes_index", skip_serializing_if = "Option::is_none")]
    pub min_outcomes_index: Option<u32>,
    /// Accepts a single integer input between 1 and 5.  Returns providers with an aggregate Cost Efficiency score (field: `performance.aggregate.cost.efficiency_index`) greater than or equal to the entered parameter.
    #[serde(rename = "min_efficiency_index", skip_serializing_if = "Option::is_none")]
    pub min_efficiency_index: Option<u32>,
    /// Accepts a single integer input between 1 and 10.  Returns providers with an aggregate Unit Cost Index score (field: `performance.aggregate.cost.unit_cost_index`) less than or equal to the entered parameter.
    #[serde(rename = "max_unit_cost_index", skip_serializing_if = "Option::is_none")]
    pub max_unit_cost_index: Option<u32>,
    /// Accepts a single integer input between 1 and 10.  Returns providers with an aggregate Ribbon Cost Score (field: `performance.aggregate.cost.ribbon_cost_score`) less than or equal to the entered parameter.  Note: this search parameter is only available to customers that have purchased our Cost and Quality data.
    #[serde(rename = "max_ribbon_cost_score", skip_serializing_if = "Option::is_none")]
    pub max_ribbon_cost_score: Option<u32>,
    /// List of desired organization uuids. Filters to only providers who have the given organization uuid(s) listed in the `provider.organizations` field.  Using this parameter will also filter the `provider.locations` returned in order to only surface `provider.locations` that have the given organization(s) in the `provider.locations.organizations` field.
    #[serde(rename = "location_organization_ids", skip_serializing_if = "Option::is_none")]
    pub location_organization_ids: Option<Vec<uuid::Uuid>>,
    /// List of desired TINs.
    #[serde(rename = "tin_ids", skip_serializing_if = "Option::is_none")]
    pub tin_ids: Option<String>,
    #[serde(rename = "tin_name", skip_serializing_if = "Option::is_none")]
    pub tin_name: Option<String>,
    #[serde(rename = "tin_legal_name", skip_serializing_if = "Option::is_none")]
    pub tin_legal_name: Option<String>,
    #[serde(rename = "inclusions", skip_serializing_if = "Option::is_none")]
    pub inclusions: Option<models::GetCustomProviders200ResponseParametersInclusions>,
    #[serde(rename = "exclusions", skip_serializing_if = "Option::is_none")]
    pub exclusions: Option<models::GetCustomProviders200ResponseParametersExclusions>,
}

impl GetCustomProviders200ResponseParameters {
    pub fn new() -> GetCustomProviders200ResponseParameters {
        GetCustomProviders200ResponseParameters {
            total_count: None,
            sort_by: None,
            geo: None,
            page: None,
            page_size: None,
            max_locations: None,
            fields: None,
            _excl_fields: None,
            npis: None,
            name: None,
            provider_types: None,
            gender: None,
            max_age: None,
            min_age: None,
            language: None,
            min_rating: None,
            address: None,
            location_ids: None,
            min_location_confidence: None,
            min_confidence: None,
            distance: None,
            state: None,
            insurance_ids: None,
            insurance_carrier_name: None,
            location_insurance_ids: None,
            national_bluecard: None,
            specialty_ids: None,
            specialty: None,
            specialty_ids_primary: None,
            primary_specialty: None,
            apply_specialty_grouping: None,
            procedure_ids: None,
            procedure: None,
            min_experience_index: None,
            max_cost_index: None,
            clinical_area: None,
            clinical_area_ids: None,
            condition: None,
            condition_ids: None,
            treatment: None,
            treatment_ids: None,
            panel_ages: None,
            panel_sexes: None,
            min_outcomes_index: None,
            min_efficiency_index: None,
            max_unit_cost_index: None,
            max_ribbon_cost_score: None,
            location_organization_ids: None,
            tin_ids: None,
            tin_name: None,
            tin_legal_name: None,
            inclusions: None,
            exclusions: None,
        }
    }
}
/// String input of either m or f to filter to only medical providers of the inputted gender.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Gender {
    #[serde(rename = "m")]
    M,
    #[serde(rename = "f")]
    F,
}

impl Default for Gender {
    fn default() -> Gender {
        Self::M
    }
}
/// List of desired panel ages strings.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PanelAges {
    #[serde(rename = "Pediatric (0-12)")]
    PediatricLeftParenthesis012RightParenthesis,
    #[serde(rename = "Adolescent (13-21)")]
    AdolescentLeftParenthesis1321RightParenthesis,
    #[serde(rename = "Adult (22-44)")]
    AdultLeftParenthesis2244RightParenthesis,
    #[serde(rename = "Adult (45-64)")]
    AdultLeftParenthesis4564RightParenthesis,
    #[serde(rename = "Senior (65 and over)")]
    SeniorLeftParenthesis65AndOverRightParenthesis,
}

impl Default for PanelAges {
    fn default() -> PanelAges {
        Self::PediatricLeftParenthesis012RightParenthesis
    }
}
/// Desired Panel Sexes string. Options are:    `Both female and male`   `Primarily female`   `Primarily male`  Returns all providers with a panel sexes label field exactly matching the entered string.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PanelSexes {
    #[serde(rename = "Both female and male")]
    BothFemaleAndMale,
    #[serde(rename = "Primarily female")]
    PrimarilyFemale,
    #[serde(rename = "Primarily male")]
    PrimarilyMale,
}

impl Default for PanelSexes {
    fn default() -> PanelSexes {
        Self::BothFemaleAndMale
    }
}

