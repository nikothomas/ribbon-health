/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetClinicalAreas200Response {
    /// The total number of results matched, across all pages.
    #[serde(rename = "count")]
    pub count: i32,
    #[serde(rename = "next", deserialize_with = "Option::deserialize")]
    pub next: Option<String>,
    #[serde(rename = "previous", deserialize_with = "Option::deserialize")]
    pub previous: Option<String>,
    #[serde(rename = "parameters", deserialize_with = "Option::deserialize")]
    pub parameters: Option<serde_json::Value>,
    /// 
    #[serde(rename = "results")]
    pub results: Vec<models::GetCustomProviders200ResponseParametersClinicalAreaIds>,
}

impl GetClinicalAreas200Response {
    pub fn new(count: i32, next: Option<String>, previous: Option<String>, parameters: Option<serde_json::Value>, results: Vec<models::GetCustomProviders200ResponseParametersClinicalAreaIds>) -> GetClinicalAreas200Response {
        GetClinicalAreas200Response {
            count,
            next,
            previous,
            parameters,
            results,
        }
    }
}

