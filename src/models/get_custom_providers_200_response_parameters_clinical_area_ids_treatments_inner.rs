/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCustomProviders200ResponseParametersClinicalAreaIdsTreatmentsInner {
    /// A UUID uniquely identifying this treatment
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<uuid::Uuid>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    /// 
    #[serde(rename = "types", skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<Types>>,
    /// 
    #[serde(rename = "specialties", skip_serializing_if = "Option::is_none")]
    pub specialties: Option<Vec<models::GetCustomProviders200ResponseParametersSpecialty>>,
}

impl GetCustomProviders200ResponseParametersClinicalAreaIdsTreatmentsInner {
    pub fn new() -> GetCustomProviders200ResponseParametersClinicalAreaIdsTreatmentsInner {
        GetCustomProviders200ResponseParametersClinicalAreaIdsTreatmentsInner {
            uuid: None,
            display: None,
            types: None,
            specialties: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Types {
    #[serde(rename = "providers")]
    Providers,
    #[serde(rename = "locations")]
    Locations,
}

impl Default for Types {
    fn default() -> Types {
        Self::Providers
    }
}

