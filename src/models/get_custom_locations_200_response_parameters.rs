/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCustomLocations200ResponseParameters {
    /// The total number of results matched, across all pages.
    #[serde(rename = "total_count", skip_serializing_if = "Option::is_none")]
    pub total_count: Option<i32>,
    /// The main criteria used to sort results in the record set.
    #[serde(rename = "sort_by", skip_serializing_if = "Option::is_none")]
    pub sort_by: Option<String>,
    #[serde(rename = "geo", skip_serializing_if = "Option::is_none")]
    pub geo: Option<models::GetCustomProviders200ResponseParametersGeo>,
    /// The page of the results which was returned.
    #[serde(rename = "page", skip_serializing_if = "Option::is_none")]
    pub page: Option<i32>,
    /// How many results are in each page.
    #[serde(rename = "page_size", skip_serializing_if = "Option::is_none")]
    pub page_size: Option<i32>,
    /// List of fields within the location object to return. Can be used to greatly reduce the size of the response by requesting only data you intend to use.  Cannot be used in tandem with `_excl_fields`
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<String>>,
    /// List of fields within the location object to exclude from the response. Can be used to greatly reduce the size of the response by requesting only data you intend to use.
    #[serde(rename = "_excl_fields", skip_serializing_if = "Option::is_none")]
    pub _excl_fields: Option<Vec<String>>,
    /// String input of an address that will be interpreted and geocoded in real time.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// String input for a fuzzy search on location name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The proximity radius of locations returned.
    #[serde(rename = "distance", skip_serializing_if = "Option::is_none")]
    pub distance: Option<i32>,
    /// List of values that filter to what type of facilities to show. We categorize locations into 34 types. Clients can add their own locations with unique location_types, and they will also be included in the search. See the Location Types Reference Endpoint for a list of all location types.
    #[serde(rename = "location_types", skip_serializing_if = "Option::is_none")]
    pub location_types: Option<Vec<String>>,
    /// List of the 'types' of locations to exclude. Excludes locations with a matching location type.
    #[serde(rename = "_excl_location_types", skip_serializing_if = "Option::is_none")]
    pub _excl_location_types: Option<Vec<String>>,
    /// List of desired insurance uuids. See all locations that accept a given insurance(s).
    #[serde(rename = "insurance_ids", skip_serializing_if = "Option::is_none")]
    pub insurance_ids: Option<Vec<uuid::Uuid>>,
    /// List of insurance uuids to exclude. Exclude locations that accept a given insurance(s).
    #[serde(rename = "_excl_insurance_ids", skip_serializing_if = "Option::is_none")]
    pub _excl_insurance_ids: Option<Vec<uuid::Uuid>>,
    /// String input of carrier_name in order to search for all locations that take at least one plan from a given insurance carrier. Find the individual valid carrier_name values from the insurance objects returned in the Insurances Reference Endpoint. Note: This input must be an exact string match to work
    #[serde(rename = "insurance_carrier_name", skip_serializing_if = "Option::is_none")]
    pub insurance_carrier_name: Option<String>,
    /// Integer input (0-5) of the minimum confidence threshold for returned locations. min_location_confidence=4 will only display locations that have a confidence 4 or higher.
    #[serde(rename = "min_confidence", skip_serializing_if = "Option::is_none")]
    pub min_confidence: Option<u32>,
    /// Boolean input that enables an API search to automatically default to the National BlueCard EPO/PPO Network whenever a member searches for out-of-state, in-network care and is covered by a BCBS Association PPO insurance plan. Use the parameter in conjunction with the address parameter and either the insurance_ids or insurance fuzzy search parameters. Defaults to true unless otherwise specified.
    #[serde(rename = "national_bluecard", skip_serializing_if = "Option::is_none")]
    pub national_bluecard: Option<bool>,
    /// Comma separated list of desired organization uuids. Filters to only locations that are affiliated with the given organization uuid(s).
    #[serde(rename = "organization_ids", skip_serializing_if = "Option::is_none")]
    pub organization_ids: Option<Vec<String>>,
    /// Comma separated list of organization uuids to exclude. Excludes locations that are affiliated with the given organization uuid(s).
    #[serde(rename = "_excl_organization_ids", skip_serializing_if = "Option::is_none")]
    pub _excl_organization_ids: Option<Vec<String>>,
    #[serde(rename = "clinical_area", skip_serializing_if = "Option::is_none")]
    pub clinical_area: Option<models::GetCustomProviders200ResponseParametersClinicalAreaIds>,
    /// List of desired clinical area ids. Returns all locations with a clinical area exactly matching any of the entered IDs. (Note: Use the `/clinical_areas/` reference endpoint to identify relevant IDs)
    #[serde(rename = "clinical_area_ids", skip_serializing_if = "Option::is_none")]
    pub clinical_area_ids: Option<Vec<String>>,
    #[serde(rename = "treatment", skip_serializing_if = "Option::is_none")]
    pub treatment: Option<models::GetCustomProviders200ResponseParametersClinicalAreaIdsTreatmentsInner>,
    /// List of desired treatment ids. Returns all providers with a `treatments.uuid` field exactly matching any of the entered IDs. (Note: Use the /treatments/ reference endpoint (docs) to identify relevant IDs)
    #[serde(rename = "treatment_ids", skip_serializing_if = "Option::is_none")]
    pub treatment_ids: Option<Vec<String>>,
    /// List of desired TINs.
    #[serde(rename = "tin_ids", skip_serializing_if = "Option::is_none")]
    pub tin_ids: Option<String>,
    #[serde(rename = "tin_name", skip_serializing_if = "Option::is_none")]
    pub tin_name: Option<String>,
    #[serde(rename = "tin_legal_name", skip_serializing_if = "Option::is_none")]
    pub tin_legal_name: Option<String>,
}

impl GetCustomLocations200ResponseParameters {
    pub fn new() -> GetCustomLocations200ResponseParameters {
        GetCustomLocations200ResponseParameters {
            total_count: None,
            sort_by: None,
            geo: None,
            page: None,
            page_size: None,
            fields: None,
            _excl_fields: None,
            address: None,
            name: None,
            distance: None,
            location_types: None,
            _excl_location_types: None,
            insurance_ids: None,
            _excl_insurance_ids: None,
            insurance_carrier_name: None,
            min_confidence: None,
            national_bluecard: None,
            organization_ids: None,
            _excl_organization_ids: None,
            clinical_area: None,
            clinical_area_ids: None,
            treatment: None,
            treatment_ids: None,
            tin_ids: None,
            tin_name: None,
            tin_legal_name: None,
        }
    }
}

