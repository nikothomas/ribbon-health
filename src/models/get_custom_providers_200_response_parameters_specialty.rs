/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetCustomProviders200ResponseParametersSpecialty {
    /// A UUID uniquely identifying this specialty
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<uuid::Uuid>,
    #[serde(rename = "taxonomy_code", skip_serializing_if = "Option::is_none")]
    pub taxonomy_code: Option<models::GetCustomProviders200ResponseParametersSpecialtyTaxonomyCode>,
    #[serde(rename = "board_specialty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub board_specialty: Option<Option<String>>,
    #[serde(rename = "board_sub_specialty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub board_sub_specialty: Option<Option<String>>,
    #[serde(rename = "non_md_specialty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub non_md_specialty: Option<Option<String>>,
    #[serde(rename = "non_md_sub_specialty", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub non_md_sub_specialty: Option<Option<String>>,
    #[serde(rename = "provider_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub provider_name: Option<Option<String>>,
    #[serde(rename = "colloquial", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub colloquial: Option<Option<String>>,
    #[serde(rename = "taxonomy_1", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub taxonomy_1: Option<Option<String>>,
    #[serde(rename = "taxonomy_2", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub taxonomy_2: Option<Option<String>>,
    #[serde(rename = "taxonomy_3", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub taxonomy_3: Option<Option<String>>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "provider_type", skip_serializing_if = "Option::is_none")]
    pub provider_type: Option<String>,
    /// Whether or not a specialty is a provider's primary specialty
    #[serde(rename = "is_primary", skip_serializing_if = "Option::is_none")]
    pub is_primary: Option<bool>,
}

impl GetCustomProviders200ResponseParametersSpecialty {
    pub fn new() -> GetCustomProviders200ResponseParametersSpecialty {
        GetCustomProviders200ResponseParametersSpecialty {
            uuid: None,
            taxonomy_code: None,
            board_specialty: None,
            board_sub_specialty: None,
            non_md_specialty: None,
            non_md_sub_specialty: None,
            provider_name: None,
            colloquial: None,
            taxonomy_1: None,
            taxonomy_2: None,
            taxonomy_3: None,
            display: None,
            provider_type: None,
            is_primary: None,
        }
    }
}

