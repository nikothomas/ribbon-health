/*
 * ribbon-health
 *
 * An API for interacting with the data provided by Ribbon Health, including information about healthcare providers, locations, insurances, and more. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetPricingProviders200ResponseParameters {
    /// The total number of results matched, across all pages.
    #[serde(rename = "total_count", skip_serializing_if = "Option::is_none")]
    pub total_count: Option<i32>,
    /// The page of the results which was returned.
    #[serde(rename = "page", skip_serializing_if = "Option::is_none")]
    pub page: Option<i32>,
    /// How many results are in each page.
    #[serde(rename = "page_size", skip_serializing_if = "Option::is_none")]
    pub page_size: Option<i32>,
    /// The UUID of the procedure that results were filtered to.  Only populated when the `procedure_id` search parameter was used.
    #[serde(rename = "procedure_id", skip_serializing_if = "Option::is_none")]
    pub procedure_id: Option<uuid::Uuid>,
    #[serde(rename = "procedure", skip_serializing_if = "Option::is_none")]
    pub procedure: Option<models::GetCustomProviders200ResponseParametersProcedure>,
    /// List of insurance UUIDs for this provider.
    #[serde(rename = "insurances", skip_serializing_if = "Option::is_none")]
    pub insurances: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "insurance", skip_serializing_if = "Option::is_none")]
    pub insurance: Option<models::GetPricingProviders200ResponseParametersInsurance>,
    /// A comma separated list of specialty UUIDs. Filter to providers with any of the given specialties.
    #[serde(rename = "specialty_ids", skip_serializing_if = "Option::is_none")]
    pub specialty_ids: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "specialty", skip_serializing_if = "Option::is_none")]
    pub specialty: Option<models::GetCustomProviders200ResponseParametersSpecialty>,
    /// String input of an address that will be interpreted and geocoded in real time.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// Latitude/longitude pair of coordinates in lieu of a string address.
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The proximity radius of providers returned.
    #[serde(rename = "distance", skip_serializing_if = "Option::is_none")]
    pub distance: Option<i32>,
    /// List of fields within the provider object to return. Can be used to greatly reduce the size of the response by requesting only data you intend to use.  Note that all price information is nested under the `matched_location` field. You almost certainly want to return this field.  Cannot be used in tandem with `_excl_fields`
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<String>>,
    /// List of fields within the provider object to exclude from the response. Can be used to greatly reduce the size of the response by requesting only data you intend to use.  Cannot be used in tandem with `fields`
    #[serde(rename = "_excl_fields", skip_serializing_if = "Option::is_none")]
    pub _excl_fields: Option<Vec<String>>,
}

impl GetPricingProviders200ResponseParameters {
    pub fn new() -> GetPricingProviders200ResponseParameters {
        GetPricingProviders200ResponseParameters {
            total_count: None,
            page: None,
            page_size: None,
            procedure_id: None,
            procedure: None,
            insurances: None,
            insurance: None,
            specialty_ids: None,
            specialty: None,
            address: None,
            location: None,
            distance: None,
            fields: None,
            _excl_fields: None,
        }
    }
}

